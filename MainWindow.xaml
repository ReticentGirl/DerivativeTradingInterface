<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:System="clr-namespace:System;assembly=mscorlib" x:Class="qiquanui.MainWindow"
        xmlns:wf="clr-namespace:System.Windows.Forms;assembly=System.Windows.Forms" 
        xmlns:my="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"    
        xmlns:local="clr-namespace:qiquanui"
        xmlns:am="http://schemas.amcharts.com/charts/wpf/2009/xaml"
        xmlns:ams="http://schemas.amcharts.com/stock/wpf/2009/xaml"

        SizeChanged="Window_SizeChanged"
        Closing="Window_Closing"
    
    
        Title="MainWindow" BorderThickness="7" WindowStyle="None" AllowsTransparency="True" Foreground="#FF8C838F" Background="#FF1D1D21" ResizeMode="CanResizeWithGrip" MinWidth="1300" MinHeight="700" Width="1198.75" Height="700.5" Opacity="0.95" Closed="Window_Closed_1" WindowState="Maximized" Loaded="Window_Loaded_1">
    <Window.Resources>

        <!--MouseDown="Window_MouseDown"         MouseMove=" Window_MouseMove"   MouseDoubleClick="Window_MouseDoubleClick"-->

        <!--实现鼠标经过渐变-->
        <!--grid1-->

        <Storyboard x:Key="grid1Animate">
            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(ListView.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Grid1">
                <EasingColorKeyFrame KeyTime="0" Value="#FF292932"/>
                <EasingColorKeyFrame KeyTime="0:0:0.3" Value=" #FF353540"/>
            </ColorAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="grid1Animate_Leave">
            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(ListView.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Grid1">
                <EasingColorKeyFrame KeyTime="0" Value=" #FF353540"/>
                <EasingColorKeyFrame KeyTime="0:0:0.3" Value="#FF292932"/>
            </ColorAnimationUsingKeyFrames>
        </Storyboard>

        <!--Canvas1-->
        <Storyboard x:Key="canvas1Animate">
            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Canvas.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Canvas1">
                <EasingColorKeyFrame KeyTime="0" Value="#FF151519"/>
                <EasingColorKeyFrame KeyTime="0:0:0.3" Value="#FF050506"/>
            </ColorAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="canvas1Animate_Leave">
            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Canvas.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Canvas1">
                <EasingColorKeyFrame KeyTime="0" Value="#FF050506"/>
                <EasingColorKeyFrame KeyTime="0:0:0.3" Value="#FF151519"/>
            </ColorAnimationUsingKeyFrames>
        </Storyboard>

        <!--Canvas2-->
        <Storyboard x:Key="canvas2Animate">
            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Canvas.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Canvas2">
                <EasingColorKeyFrame KeyTime="0" Value="#FF151519"/>
                <EasingColorKeyFrame KeyTime="0:0:0.3" Value="#FF050506"/>
            </ColorAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="canvas2Animate_Leave">
            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Canvas.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Canvas2">
                <EasingColorKeyFrame KeyTime="0" Value="#FF050506"/>
                <EasingColorKeyFrame KeyTime="0:0:0.3" Value="#FF151519"/>
            </ColorAnimationUsingKeyFrames>
        </Storyboard>

        <!--Grid3-->
        <Storyboard x:Key="Grid3Animate">
            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Grid.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Grid3">
                <EasingColorKeyFrame KeyTime="0" Value="#FF0D0D11"/>
                <EasingColorKeyFrame KeyTime="0:0:0.3" Value="#FF07070A"/>
            </ColorAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="Grid3Animate_Leave">
            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Grid.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Grid3">
                <EasingColorKeyFrame KeyTime="0" Value="#FF07070A"/>
                <EasingColorKeyFrame KeyTime="0:0:0.3" Value="#FF0D0D11"/>
            </ColorAnimationUsingKeyFrames>
        </Storyboard>

        <!--optionsMarketTitleGrid-->
        <Storyboard x:Key="optionsMarketTitleGridAnimate">
            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Grid.Background).(SolidColorBrush.Color)" Storyboard.TargetName="optionsMarketTitleGrid">
                <EasingColorKeyFrame KeyTime="0" Value="#FF101013"/>
                <EasingColorKeyFrame KeyTime="0:0:0.3" Value="#FF050506"/>
            </ColorAnimationUsingKeyFrames>

        </Storyboard>
        <Storyboard x:Key="optionsMarketTitleGridAnimate_Leave">
            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Grid.Background).(SolidColorBrush.Color)" Storyboard.TargetName="optionsMarketTitleGrid">
                <EasingColorKeyFrame KeyTime="0" Value="#FF050506"/>
                <EasingColorKeyFrame KeyTime="0:0:0.3" Value="#FF101013"/>
            </ColorAnimationUsingKeyFrames>
        </Storyboard>

        <!--TopCanvasButtomGrid-->
        <Storyboard x:Key="TopCanvasButtomGridAnimate">
            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Grid.Background).(SolidColorBrush.Color)" Storyboard.TargetName="TopCanvasButtomGrid">
                <EasingColorKeyFrame KeyTime="0" Value="#FF0D0D11"/>
                <EasingColorKeyFrame KeyTime="0:0:0.3" Value="#FF08080A"/>
            </ColorAnimationUsingKeyFrames>

        </Storyboard>
        <Storyboard x:Key="TopCanvasButtomGridAnimate_Leave">
            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Grid.Background).(SolidColorBrush.Color)" Storyboard.TargetName="TopCanvasButtomGrid">
                <EasingColorKeyFrame KeyTime="0" Value="#FF08080A"/>
                <EasingColorKeyFrame KeyTime="0:0:0.3" Value="#FF0D0D11"/>
            </ColorAnimationUsingKeyFrames>
        </Storyboard>

        <!--strategyOfOptionsCanvas-->
        <Storyboard x:Key="strategyOfOptionsCanvasAnimate"/>
        <Storyboard x:Key="strategyOfOptionsCanvasAnimate_Leave"/>

        <!--strategyOfFuturesCanvas-->
        <Storyboard x:Key="strategyOfFuturesCanvasAnimate">
            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Canvas.Background).(SolidColorBrush.Color)" Storyboard.TargetName="strategyOfFuturesCanvas">
                <EasingColorKeyFrame KeyTime="0" Value="#FF151519"/>
                <EasingColorKeyFrame KeyTime="0:0:0.3" Value="#FF343640"/>
            </ColorAnimationUsingKeyFrames>

        </Storyboard>
        <Storyboard x:Key="strategyOfFuturesCanvasAnimate_Leave">
            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Grid.Background).(SolidColorBrush.Color)" Storyboard.TargetName="strategyOfFuturesCanvas">
                <EasingColorKeyFrame KeyTime="0" Value="#FF343640"/>
                <EasingColorKeyFrame KeyTime="0:0:0.3" Value="#FF151519"/>
            </ColorAnimationUsingKeyFrames>
        </Storyboard>

        <!--basicInforAndPromptGrid-->
        <Storyboard x:Key="basicInforAndPromptGridAnimate">
            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Grid.Background).(SolidColorBrush.Color)" Storyboard.TargetName="basicInforAndPromptGrid">
                <EasingColorKeyFrame KeyTime="0" Value="#FF22242B"/>
                <EasingColorKeyFrame KeyTime="0:0:0.3" Value="#FF2D3038"/>
            </ColorAnimationUsingKeyFrames>

        </Storyboard>
        <Storyboard x:Key="basicInforAndPromptGridAnimate_Leave">
            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Grid.Background).(SolidColorBrush.Color)" Storyboard.TargetName="basicInforAndPromptGrid">
                <EasingColorKeyFrame KeyTime="0" Value="#FF2D3038"/>
                <EasingColorKeyFrame KeyTime="0:0:0.3" Value="#FF22242B"/>
            </ColorAnimationUsingKeyFrames>
        </Storyboard>


        <!--实现鼠标经过渐变-->


        <LinearGradientBrush x:Key="Brush1" EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="#FF25112C" Offset="0"/>
            <GradientStop Color="#FF0C0C1B" Offset="1"/>
        </LinearGradientBrush>
        <Style x:Key="maxSty" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <StackPanel Orientation="Horizontal" >
                            <Image x:Name="ImgBtnBg3" Source="Resources\max.png" />
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Source" Value="Resources\max_hover.png" TargetName="ImgBtnBg3"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Source" Value="Resources\max_down.png" TargetName="ImgBtnBg3"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Source" Value="Resources\max_unable.png" TargetName="ImgBtnBg3"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="closeSty" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <StackPanel Orientation="Horizontal" >
                            <Image x:Name="ImgBtnBg3" Source="Resources\close.png" />
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Source" Value="Resources\close_hover.png" TargetName="ImgBtnBg3"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Source" Value="Resources\close_down.png" TargetName="ImgBtnBg3"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Source" Value="Resources\close_unable.png" TargetName="ImgBtnBg3"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="minSty" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <StackPanel Orientation="Horizontal" >
                            <Image x:Name="ImgBtnBg3" Source="Resources\min.png" />
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Source" Value="Resources\min_hover.png" TargetName="ImgBtnBg3"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Source" Value="Resources\min_down.png" TargetName="ImgBtnBg3"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Source" Value="Resources\min_unable.png" TargetName="ImgBtnBg3"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="normalSty" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <StackPanel Orientation="Horizontal" >
                            <Image x:Name="ImgBtnBg3" Source="Resources\normal.png" />
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Source" Value="Resources\normal_hover.png" TargetName="ImgBtnBg3"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Source" Value="Resources\normal_down.png" TargetName="ImgBtnBg3"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Source" Value="Resources\normal_unable.png" TargetName="ImgBtnBg3"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="darkButton" TargetType="{x:Type Button}">
            <Setter Property="Foreground" Value="White"/>
            <!--修改模板属性-->
            <Setter Property="Template">
                <Setter.Value>
                    <!--控件模板-->
                    <ControlTemplate TargetType="Button">
                        <!--背景色-->
                        <Border x:Name="back" Opacity="0.8" CornerRadius="3">
                            <Border.BitmapEffect>
                                <OuterGlowBitmapEffect Opacity="0.7" GlowSize="0" GlowColor="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Button.Background).(SolidColorBrush.Color)}" />
                            </Border.BitmapEffect>
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1.5">
                                    <GradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Button.Background).(SolidColorBrush.Color)}" Offset="0"/>
                                            <GradientStop Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Button.Background).(SolidColorBrush.Color)}" Offset="0.4"/>
                                            <GradientStop Color="#FFF" Offset="1"/>
                                        </GradientStopCollection>
                                    </GradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.Background>
                            <!--前景色及边框-->
                            <Border x:Name="fore" BorderThickness="1" CornerRadius="3" BorderBrush="#5555">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="#6FFF" Offset="0.5"/>
                                                <GradientStop Color="#118B8484" Offset="0.51"/>
                                            </GradientStopCollection>
                                        </GradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <!--按钮内容-->
                                <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding  Content}">
                                    <ContentPresenter.BitmapEffect>
                                        <DropShadowBitmapEffect Color="#000" Direction="-90" ShadowDepth="2" Softness="0.1" Opacity="0.3" />
                                    </ContentPresenter.BitmapEffect>
                                </ContentPresenter>
                            </Border>
                        </Border>
                        <!--触发器-->
                        <ControlTemplate.Triggers>
                            <!--鼠标移入移出-->
                            <Trigger Property="IsMouseOver" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation To="6" Duration="0:0:0.2" Storyboard.TargetName="back" Storyboard.TargetProperty="(Border.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)" />
                                            <ColorAnimation To="#AFFF" BeginTime="0:0:0.2" Duration="0:0:0.2" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                            <ColorAnimation To="#3FFF" BeginTime="0:0:0.2" Duration="0:0:0.2" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetName="back" Storyboard.TargetProperty="(Border.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)" />
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <!--按钮按下弹起-->
                            <Trigger Property="IsPressed" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation To="3" Duration="0:0:0.1" Storyboard.TargetName="back" Storyboard.TargetProperty="(Border.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)" />
                                            <ColorAnimation To="#3AAA" Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                            <ColorAnimation To="#2111" Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="back" Storyboard.TargetProperty="(Border.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)" />
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <!--按钮失效-->
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="#B444"/>
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation To="0" Duration="0:0:0.3" Storyboard.TargetName="back" Storyboard.TargetProperty="(Border.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)" />
                                            <DoubleAnimation To="1" Duration="0:0:0.1" Storyboard.TargetName="content" Storyboard.TargetProperty="(ContentPresenter.BitmapEffect).(DropShadowBitmapEffect.Opacity)" />
                                            <DoubleAnimation To="-135" Duration="0:0:0.1" Storyboard.TargetName="content" Storyboard.TargetProperty="(ContentPresenter.BitmapEffect).(DropShadowBitmapEffect.Direction)" />
                                            <ColorAnimation To="#FFF" Duration="0:0:0.3" Storyboard.TargetName="content" Storyboard.TargetProperty="(ContentPresenter.BitmapEffect).(DropShadowBitmapEffect.Color)" />
                                            <ColorAnimation To="#D555" Duration="0:0:0.3" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" />
                                            <ColorAnimation To="#CEEE" Duration="0:0:0.3" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                            <ColorAnimation To="#CDDD" Duration="0:0:0.3" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="back" Storyboard.TargetProperty="(Border.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)" />
                                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="content" Storyboard.TargetProperty="(ContentPresenter.BitmapEffect).(DropShadowBitmapEffect.Opacity)" />
                                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="content" Storyboard.TargetProperty="(ContentPresenter.BitmapEffect).(DropShadowBitmapEffect.Direction)" />
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="content" Storyboard.TargetProperty="(ContentPresenter.BitmapEffect).(DropShadowBitmapEffect.Color)" />
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" />
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>

        <Style x:Key="TabItemStyle" TargetType="{x:Type TabItem}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabItem}">
                        <Grid>
                            <Border Name="Border" Background="#FF0F1017"  BorderThickness="0" CornerRadius="0,0,0,0">
                                <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" Margin="12,2,12,2"/>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="#FF007ACC" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="False">
                                <Setter TargetName="Border" Property="Background" Value="{x:Null}" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="#FF0A9DFF"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="scrollTop" TargetType="{x:Type RepeatButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <StackPanel Orientation="Horizontal" Height="17" >
                            <Image x:Name="ImgBtnBg3" Source="Resources\scroll_top.png" Margin="0" Width="17" Height="17" />
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Source" Value="Resources\scroll_top_hover.png" TargetName="ImgBtnBg3"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Source" Value="Resources\scroll_top_down.png" TargetName="ImgBtnBg3"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Source" Value="Resources\scroll_top_unable.png" TargetName="ImgBtnBg3"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="scrollButtom" TargetType="{x:Type RepeatButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <StackPanel Orientation="Horizontal" Height="17" >
                            <Image x:Name="ImgBtnBg3" Source="Resources\scroll_Buttom.png" Margin="0" Width="17" Height="17" />
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Source" Value="Resources\scroll_Buttom_hover.png" TargetName="ImgBtnBg3"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Source" Value="Resources\scroll_Buttom_down.png" TargetName="ImgBtnBg3"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Source" Value="Resources\scroll_Buttom_unable.png" TargetName="ImgBtnBg3"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="scrollThumb" TargetType="{x:Type Thumb}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Thumb">
                        <Rectangle Width="12" Fill="#FF242530" RadiusX="7" RadiusY="7">
                        </Rectangle>

                    </ControlTemplate>

                </Setter.Value>

            </Setter>

        </Style>

        <Style x:Key="futureScrollThumb" TargetType="{x:Type Thumb}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Thumb">
                        <Rectangle Width="12" Fill="#FF404251" RadiusX="7" RadiusY="7">
                        </Rectangle>

                    </ControlTemplate>

                </Setter.Value>

            </Setter>

        </Style>

        <Style x:Key="scrollBackground" TargetType="{x:Type RepeatButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RepeatButton">
                        <Border Background="Transparent">
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Simple ScrollBar  它使用了 SimpleThumb、SimpleRepeatButton 和 SimpleScrollRepeatButton -->

        <Style x:Key="SimpleScrollBar" TargetType="{x:Type ScrollBar}">
            <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
            <Setter Property="Foreground" Value="#FF101017
"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                        <Grid x:Name="GridRoot" Width="Auto" >
                            <!--Width:{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}};-->
                            <Grid.RowDefinitions>
                                <RowDefinition MaxHeight="18"/>
                                <RowDefinition Height="0.00001*"/>
                                <RowDefinition MaxHeight="18"/>
                            </Grid.RowDefinitions>

                            <RepeatButton x:Name="DecreaseRepeat" Style="{StaticResource scrollTop}" Command="ScrollBar.LineUpCommand" Margin="0" Grid.RowSpan="1">

                            </RepeatButton>

                            <!-- Track 是一种特殊的布局容器，可调整用于在其一侧执行跳转滚动的 thumb 和 repeat button 的大小 -->
                            <Track Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
                                <Track.Thumb>
                                    <Thumb Style="{StaticResource scrollThumb}"/>
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton x:Name="PageUp" Style="{StaticResource scrollBackground}" Command="ScrollBar.PageDownCommand"/>
                                </Track.IncreaseRepeatButton>
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton x:Name="PageDown" Style="{StaticResource scrollBackground}" Command="ScrollBar.PageUpCommand"/>
                                </Track.DecreaseRepeatButton>
                            </Track>

                            <RepeatButton Grid.Row="2" x:Name="IncreaseRepeat" Style="{StaticResource scrollButtom}" Command="ScrollBar.LineDownCommand">
                                <Grid>
                                    <Path x:Name="IncreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 0 0 L 4 4 L 8 0 Z"/>
                                </Grid>
                            </RepeatButton>
                        </Grid>

                        <!-- 它对 ScrollBar 使用一个模板，并将其旋转为“水平”
                    它还会更改命令，使其执行“向左”和“向右”命令，而不是执行“向上”和“向下”命令 -->
                        <ControlTemplate.Triggers>
                            <Trigger Property="Orientation" Value="Horizontal">

                                <!-- 将 ScrollBar 从“垂直”旋转为“水平” -->
                                <Setter Property="LayoutTransform" TargetName="GridRoot">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90"/>
                                    </Setter.Value>
                                </Setter>

                                <!-- Track 在内部绑定到“方向”，因此我们需要将其旋转回“垂直” -->
                                <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical"/>

                                <!-- 更改命令，以执行“水平”命令 -->
                                <Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeat"/>
                                <Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeat"/>
                                <Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown"/>
                                <Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="futureSimpleScrollBar" TargetType="{x:Type ScrollBar}">
            <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
            <Setter Property="Foreground" Value="#FF101017
"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                        <Grid x:Name="GridRoot" Width="Auto" >
                            <!--Width:{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}};-->
                            <Grid.RowDefinitions>
                                <RowDefinition MaxHeight="18"/>
                                <RowDefinition Height="0.00001*"/>
                                <RowDefinition MaxHeight="18"/>
                            </Grid.RowDefinitions>

                            <RepeatButton x:Name="DecreaseRepeat" Style="{StaticResource scrollTop}" Command="ScrollBar.LineUpCommand" Margin="0" Grid.RowSpan="1">

                            </RepeatButton>

                            <!-- Track 是一种特殊的布局容器，可调整用于在其一侧执行跳转滚动的 thumb 和 repeat button 的大小 -->
                            <Track Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
                                <Track.Thumb>
                                    <Thumb Style="{StaticResource futureScrollThumb}"/>
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton x:Name="PageUp" Style="{StaticResource scrollBackground}" Command="ScrollBar.PageDownCommand"/>
                                </Track.IncreaseRepeatButton>
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton x:Name="PageDown" Style="{StaticResource scrollBackground}" Command="ScrollBar.PageUpCommand"/>
                                </Track.DecreaseRepeatButton>
                            </Track>

                            <RepeatButton Grid.Row="2" x:Name="IncreaseRepeat" Style="{StaticResource scrollButtom}" Command="ScrollBar.LineDownCommand">
                                <Grid>
                                    <Path x:Name="IncreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 0 0 L 4 4 L 8 0 Z"/>
                                </Grid>
                            </RepeatButton>
                        </Grid>

                        <!-- 它对 ScrollBar 使用一个模板，并将其旋转为“水平”
                    它还会更改命令，使其执行“向左”和“向右”命令，而不是执行“向上”和“向下”命令 -->
                        <ControlTemplate.Triggers>
                            <Trigger Property="Orientation" Value="Horizontal">

                                <!-- 将 ScrollBar 从“垂直”旋转为“水平” -->
                                <Setter Property="LayoutTransform" TargetName="GridRoot">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90"/>
                                    </Setter.Value>
                                </Setter>

                                <!-- Track 在内部绑定到“方向”，因此我们需要将其旋转回“垂直” -->
                                <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical"/>

                                <!-- 更改命令，以执行“水平”命令 -->
                                <Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeat"/>
                                <Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeat"/>
                                <Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown"/>
                                <Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Simple ScrollViewer 
    ScrollViewer 是 Grid 控件，该控件包含 ContentPresenter 以及 Horizontal 和 Vertical ScrollBar 
    它可供 ListBox、MenuItem、ComboBox 和 TreeView 使用 -->
        <Style x:Key="SimpleScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                        <Grid Background="{TemplateBinding Background}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"/>

                            <!-- ScrollBars 的可见性通过控件的实现来控制 -->
                            <ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" x:Name="PART_HorizontalScrollBar" Style="{DynamicResource SimpleScrollBar}" Orientation="Horizontal" Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" />
                            <ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" x:Name="PART_VerticalScrollBar" Style="{DynamicResource SimpleScrollBar}" Orientation="Vertical" Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="futureSimpleScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                        <Grid Background="{TemplateBinding Background}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"/>

                            <!-- ScrollBars 的可见性通过控件的实现来控制 -->
                            <ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" x:Name="PART_HorizontalScrollBar" Style="{DynamicResource futureSimpleScrollBar}" Orientation="Horizontal" Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" />
                            <ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" x:Name="PART_VerticalScrollBar" Style="{DynamicResource futureSimpleScrollBar}" Orientation="Vertical" Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>



        <!--listview的样式{x:Static GridView.GridViewScrollViewerStyleKey}-->

        <Style x:Key="futureGridViewScrollViewerStyle"
       TargetType="ScrollViewer">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ScrollViewer">
                        <Grid Background="{TemplateBinding Background}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <DockPanel Margin="{TemplateBinding Padding}">
                                <ScrollViewer DockPanel.Dock="Top"
              HorizontalScrollBarVisibility="Hidden"
              VerticalScrollBarVisibility="Hidden"
              Focusable="false" Style="{StaticResource futureSimpleScrollViewer}"
>
                                    <GridViewHeaderRowPresenter Margin="2,0,2,0"
                Columns="{Binding Path=TemplatedParent.View.Columns,
                          RelativeSource={RelativeSource TemplatedParent}}"
                ColumnHeaderContainerStyle="{Binding
                             Path=TemplatedParent.View.ColumnHeaderContainerStyle,
                             RelativeSource={RelativeSource TemplatedParent}}"
                ColumnHeaderTemplate="{Binding
                             Path=TemplatedParent.View.ColumnHeaderTemplate,
                             RelativeSource={RelativeSource TemplatedParent}}"
                ColumnHeaderTemplateSelector="{Binding 
                             Path=TemplatedParent.View.ColumnHeaderTemplateSelector,
                             RelativeSource={RelativeSource TemplatedParent}}"
                AllowsColumnReorder="{Binding
                             Path=TemplatedParent.View.AllowsColumnReorder,
                             RelativeSource={RelativeSource TemplatedParent}}"
                ColumnHeaderContextMenu="{Binding
                             Path=TemplatedParent.View.ColumnHeaderContextMenu,
                             RelativeSource={RelativeSource TemplatedParent}}"
                ColumnHeaderToolTip="{Binding
                             Path=TemplatedParent.View.ColumnHeaderToolTip,
                             RelativeSource={RelativeSource TemplatedParent}}"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </ScrollViewer>

                                <ScrollContentPresenter Name="PART_ScrollContentPresenter"
              KeyboardNavigation.DirectionalNavigation="Local"
              CanContentScroll="True" CanHorizontallyScroll="False" 
              CanVerticallyScroll="False"/>
                            </DockPanel>

                            <ScrollBar Name="PART_HorizontalScrollBar"
            Orientation="Horizontal"
            Grid.Row="1"
            Maximum="{TemplateBinding ScrollableWidth}"
            ViewportSize="{TemplateBinding ViewportWidth}"
            Value="{TemplateBinding HorizontalOffset}"
            Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                       Style="{StaticResource futureSimpleScrollBar}"/>

                            <ScrollBar Name="PART_VerticalScrollBar"
            Grid.Column="1"
            Maximum="{TemplateBinding ScrollableHeight}"
            ViewportSize="{TemplateBinding ViewportHeight}"
            Value="{TemplateBinding VerticalOffset}"
            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                     Style="{StaticResource futureSimpleScrollBar}"  />

                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>



        <Style x:Key="GridViewScrollViewerStyle"
       TargetType="ScrollViewer">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ScrollViewer">
                        <Grid Background="{TemplateBinding Background}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <DockPanel Margin="{TemplateBinding Padding}">
                                <ScrollViewer DockPanel.Dock="Top"
              HorizontalScrollBarVisibility="Hidden"
              VerticalScrollBarVisibility="Hidden"
              Focusable="false" Style="{StaticResource SimpleScrollViewer}"
>
                                    <GridViewHeaderRowPresenter Margin="2,0,2,0"
                Columns="{Binding Path=TemplatedParent.View.Columns,
                          RelativeSource={RelativeSource TemplatedParent}}"
                ColumnHeaderContainerStyle="{Binding
                             Path=TemplatedParent.View.ColumnHeaderContainerStyle,
                             RelativeSource={RelativeSource TemplatedParent}}"
                ColumnHeaderTemplate="{Binding
                             Path=TemplatedParent.View.ColumnHeaderTemplate,
                             RelativeSource={RelativeSource TemplatedParent}}"
                ColumnHeaderTemplateSelector="{Binding 
                             Path=TemplatedParent.View.ColumnHeaderTemplateSelector,
                             RelativeSource={RelativeSource TemplatedParent}}"
                AllowsColumnReorder="{Binding
                             Path=TemplatedParent.View.AllowsColumnReorder,
                             RelativeSource={RelativeSource TemplatedParent}}"
                ColumnHeaderContextMenu="{Binding
                             Path=TemplatedParent.View.ColumnHeaderContextMenu,
                             RelativeSource={RelativeSource TemplatedParent}}"
                ColumnHeaderToolTip="{Binding
                             Path=TemplatedParent.View.ColumnHeaderToolTip,
                             RelativeSource={RelativeSource TemplatedParent}}"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </ScrollViewer>

                                <ScrollContentPresenter Name="PART_ScrollContentPresenter"
              KeyboardNavigation.DirectionalNavigation="Local"
              CanContentScroll="True" CanHorizontallyScroll="False" 
              CanVerticallyScroll="False"/>
                            </DockPanel>

                            <ScrollBar Name="PART_HorizontalScrollBar"
            Orientation="Horizontal"
            Grid.Row="1"
            Maximum="{TemplateBinding ScrollableWidth}"
            ViewportSize="{TemplateBinding ViewportWidth}"
            Value="{TemplateBinding HorizontalOffset}"
            Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                       Style="{StaticResource SimpleScrollBar}"/>

                            <ScrollBar Name="PART_VerticalScrollBar"
            Grid.Column="1"
            Maximum="{TemplateBinding ScrollableHeight}"
            ViewportSize="{TemplateBinding ViewportHeight}"
            Value="{TemplateBinding VerticalOffset}"
            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                     Style="{StaticResource SimpleScrollBar}"  />

                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="GridViewColumnHeaderGripper" TargetType="Thumb">
            <Setter Property="Width" Value="18"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Border Padding="{TemplateBinding Padding}"
          Background="Transparent">
                            <Rectangle HorizontalAlignment="Center"
            Width="1"
            Fill="{TemplateBinding Background}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--<Style x:Key="ListViewStyle" TargetType="{x:Type ListView}">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
            <Setter Property="BorderBrush" Value="White" />
            <Setter Property="BorderThickness" Value="0,3,0,0" />
            <Setter Property="Foreground" Value="#FF67697F" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            

            <Setter Property="Template">
                <Setter.Value>

                    <ControlTemplate TargetType="{x:Type ListView}">
                        <Grid>

                            <Border x:Name="Bd" CornerRadius="0,0,0,0" BorderBrush="#FF0076C8" Background="{DynamicResource ControlBackgroundBrush}" BorderThickness="0,3,0,0">

                                <ScrollViewer Padding="{TemplateBinding Padding}" Style="{StaticResource SimpleScrollViewer}">
                                    <StackPanel Margin="{TemplateBinding Padding}">

                                        <GridViewHeaderRowPresenter
            Margin="2,0,2,0"
            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
            AllowsColumnReorder="{Binding View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}"
            ColumnHeaderContainerStyle="{Binding View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
            ColumnHeaderContextMenu="{Binding View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
            ColumnHeaderStringFormat="{Binding View.ColumnHeaderStringFormat, RelativeSource={RelativeSource TemplatedParent}}"
            ColumnHeaderTemplate="{Binding View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}"
            ColumnHeaderTemplateSelector="{Binding View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
            ColumnHeaderToolTip="{Binding View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}"
            Columns="{Binding View.Columns, RelativeSource={RelativeSource TemplatedParent}}"/>

                                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="Center" />

                                    </StackPanel>
                                </ScrollViewer>


                            </Border>


                        </Grid>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>-->
        <Style x:Key="futureListViewStyle" TargetType="ListView">
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListView">
                        <Border Name="Border"
          BorderThickness="0,1"
          BorderBrush="#FF454757"
          Background="Transparent">
                            <ScrollViewer Style="{StaticResource futureGridViewScrollViewerStyle}">
                                <ItemsPresenter />
                            </ScrollViewer>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsGrouping"
                   Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll"
                    Value="false"/>
                            </Trigger>
                            <Trigger Property="IsEnabled"
                   Value="false"/>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ListViewStyle" TargetType="ListView">
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListView">
                        <Border x:Name="Bd" CornerRadius="0,0,0,0" BorderBrush="#FF0076C8" Background="{DynamicResource ControlBackgroundBrush}" BorderThickness="0,3,0,0">
                            <ScrollViewer Style="{StaticResource GridViewScrollViewerStyle}">
                                <ItemsPresenter />
                            </ScrollViewer>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsGrouping"
                   Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll"
                    Value="false"/>
                            </Trigger>
                            <Trigger Property="IsEnabled"
                   Value="false"/>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ListViewItemFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Stroke="#FFC0C4DA" StrokeThickness="1" RadiusX="2" RadiusY="2" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <ControlTemplate x:Key="tmpForThumb" TargetType="{x:Type Thumb}">
            <Border>
                <Rectangle Width="1" Name="rec">
                    <Rectangle.Fill>
                        <LinearGradientBrush StartPoint="0.5,0.3" EndPoint="1,1" Opacity="0.2">
                            <GradientStop Color="#FF939BCB"/>
                            <GradientStop Color="Transparent" Offset="1"/>
                        </LinearGradientBrush>
                    </Rectangle.Fill>
                </Rectangle>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter TargetName="rec" Property="Fill" Value="#FF767EA8"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>


        <Style  TargetType="{x:Type GridViewColumnHeader}">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="BorderThickness" Value="0"/>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                        <Grid Name="g">
                            <Grid.Background>
                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1" Opacity="0.2">
                                    <GradientStop Color="Transparent"/>
                                    <GradientStop Color="Transparent" Offset="1"/>
                                </LinearGradientBrush>
                            </Grid.Background>
                            <Border Name="bd" Padding="{TemplateBinding Padding}">
                                <ContentPresenter Margin="0,5"  HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                            <Thumb Name="PART_HeaderGripper" Template="{StaticResource tmpForThumb}" HorizontalAlignment="Right" Margin="0"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="g" Property="Background">
                                    <Setter.Value>
                                        <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1" Opacity="0.2">
                                            <GradientStop Color="White" Offset="0" />

                                            <GradientStop Color="Transparent" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>

                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--数据源-->

        <!--ListViewItem的样式-->
        <Style TargetType="{x:Type ListViewItem}">
            <Style.Setters>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Padding" Value="0"/>
                <Setter Property="Margin" Value="0"/>
                <Setter Property="Height" Value="35"/>
                <Setter Property="HorizontalAlignment" Value="Left" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                            <Border x:Name="bd"  
                               BorderThickness="0,0,0,0.5"  
                                Padding="{TemplateBinding Padding}"  
                               SnapsToDevicePixels="True" BorderBrush="#FF414559">
                                <GridViewRowPresenter HorizontalAlignment="Center"  
                                                  Margin="0,5"/>
                            </Border>
                            <ControlTemplate.Triggers>

                                <Trigger Property="IsSelected" Value="True">
                                    <Trigger.Setters>

                                        <Setter TargetName="bd" Property="Background">
                                            <Setter.Value>
                                                <SolidColorBrush Color="Black" Opacity="0.5"/>
                                            </Setter.Value>
                                        </Setter>


                                    </Trigger.Setters>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Trigger.Setters>
                                        <Setter TargetName="bd" Property="Background">
                                            <Setter.Value>
                                                <SolidColorBrush Color="#FF1B1C21" Opacity="0.5"/>
                                            </Setter.Value>
                                        </Setter>
                                    </Trigger.Setters>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style.Setters>
        </Style>
        <!-- <Style TargetType="{x:Type ListViewItem}">
            <Style.Setters>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Padding" Value="0"/>
                <Setter Property="Margin" Value="0"/>
                <Setter Property="Height" Value="30"/>
                <Setter Property="HorizontalAlignment" Value="Left" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                            <Border x:Name="bd"  
                               BorderThickness="0,0,0,1"  
                                Padding="{TemplateBinding Padding}"  
                               SnapsToDevicePixels="True" BorderBrush="#FF414559">
                                <GridViewRowPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"  
                                                  Margin="3"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                
                                <Trigger Property="IsSelected" Value="True">
                                    <Trigger.Setters>
                                        
                                <Setter TargetName="bd" Property="Background">
                                            <Setter.Value>
                                                <SolidColorBrush Color="#FF0A0A0E" Opacity="0.5"/>
                                            </Setter.Value>
                                        </Setter>


                                    </Trigger.Setters>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Trigger.Setters>
                                        <Setter TargetName="bd" Property="Background">
                                            <Setter.Value>
                                                <SolidColorBrush Color="#FF1F212C" Opacity="0.5"/>
                                            </Setter.Value>
                                        </Setter>
                                    </Trigger.Setters>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style.Setters>
        </Style>-->


        <!--checkbox样式-->
        <!--当控件获得键盘焦点时的样式-->

        <Style x:Key="FocusStyle">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Stroke="#FF919BB6" StrokeThickness="1" RadiusX="2" RadiusY="2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- 
  CheckBox的样式 
-->
        <Style TargetType="{x:Type CheckBox}">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusStyle}"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Foreground" Value="#FF787B8E"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <BulletDecorator FlowDirection="LeftToRight" VerticalAlignment="Center">
                            <BulletDecorator.Bullet>
                                <Border x:Name="bd"  
                               BorderThickness="1"  
                                BorderBrush="#FF504B5B"  
                                MinHeight="15"  
                                MinWidth="15"  
                               VerticalAlignment="Center">
                                    <Border.Background>
                                        <LinearGradientBrush StartPoint="0,0"  
                                      EndPoint="0,1">
                                            <GradientStop Color="#FF0F111B" Offset="0"/>
                                            <GradientStop Color="#FF0C0E16" Offset="1"/>

                                        </LinearGradientBrush>
                                    </Border.Background>
                                    <Path x:Name="cp" Width="12" Height="12"  
                        Stroke="#FF007ACC"  
                             StrokeThickness="1"/>
                                </Border>
                            </BulletDecorator.Bullet>
                            <ContentPresenter Margin="2,0"/>
                        </BulletDecorator>
                        <!-- 
                    控件触发器 
                -->
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <!-- 画上一个勾 -->
                                <Setter TargetName="cp" Property="Data"  
          Value="M 0,6 L 6,12 12,0"/>
                                <Setter Property="Foreground" Value="#FF007ACC"/>
                                <Setter TargetName="bd" Property="BorderBrush" Value="#FF007ACC"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="bd" Property="Background">
                                    <Setter.Value>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Color="#FF2E3347" Offset="0"/>
                                            <GradientStop Color="#FF24283A" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="bd" Property="BorderBrush" Value="#FFA6A9BB"/>
                            </Trigger>




                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <!--checkbox样式-->

        <!--combobox样式-->
        <!--下拉框样式-->
        <Style x:Key="ComboBoxFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="4,4,21,4" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <LinearGradientBrush x:Key="ButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="Transparent" Offset="0"/>
            <GradientStop Color="Transparent" Offset="1"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF484B5F"/>
        <Geometry x:Key="DownArrowGeometry">M 0 0 L 3.5 4 L 7 0 Z</Geometry>
        <Style x:Key="ComboBoxReadonlyToggleButton" TargetType="{x:Type ToggleButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="ClickMode" Value="Press"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border BorderThickness="{TemplateBinding BorderThickness}" x:Name="Chrome"  BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"  SnapsToDevicePixels="true">
                            <Grid HorizontalAlignment="Right" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                <Path x:Name="Arrow" Data="{StaticResource DownArrowGeometry}" Fill="#808080" HorizontalAlignment="Center" Margin="1,1,0,0" VerticalAlignment="Center"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Fill" TargetName="Arrow" Value="#AFAFAF"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <LinearGradientBrush x:Key="TextBoxBorder" EndPoint="0,20" MappingMode="Absolute" StartPoint="0,0">
            <GradientStop Color="#FF575B72" Offset="0.05"/>

            <GradientStop Color="#FF3A3C49" Offset="1"/>
        </LinearGradientBrush>
        <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="AllowDrop" Value="true"/>
            <Setter Property="MinWidth" Value="0"/>
            <Setter Property="MinHeight" Value="0"/>
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusStyle}"/>
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Foreground="White"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="ClickMode" Value="Press"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="20" />
                            </Grid.ColumnDefinitions>
                            <Border
      x:Name="Border" 
      Grid.ColumnSpan="2"
      CornerRadius="2"
      Background="{DynamicResource ButtonNormalBorder}"
      BorderBrush="White"
      BorderThickness="1" />

                            <my:ButtonChrome x:Name="Chrome" Background="{TemplateBinding Background}" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" RoundCorners="false" SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                <Path x:Name="Arrow" Data="{StaticResource DownArrowGeometry}" Fill="Black" HorizontalAlignment="Center" Margin="0,1,0,0" VerticalAlignment="Center"/>
                            </my:ButtonChrome>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="RenderPressed" TargetName="Chrome" Value="true"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Fill" TargetName="Arrow" Value="#FF51546A"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="#FF3F4149"/>
                                <Setter TargetName="Border" Property="BorderBrush" Value="White"/>

                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
            <Grid x:Name="Placement" SnapsToDevicePixels="true">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                    <my:SystemDropShadowChrome x:Name="Shdw" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=Placement}">
                        <Border x:Name="DropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                            <ScrollViewer x:Name="DropDownScrollViewer">
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                        <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </my:SystemDropShadowChrome>
                </Popup>
                <my:ListBoxChrome x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderFocused="{TemplateBinding IsKeyboardFocusWithin}"/>
                <TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                <ToggleButton Grid.Column="1" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsKeyboardFocusWithin" Value="true">
                    <Setter Property="Foreground" Value="Black"/>
                </Trigger>
                <Trigger Property="IsDropDownOpen" Value="true">
                    <Setter Property="RenderFocused" TargetName="Border" Value="true"/>
                </Trigger>
                <Trigger Property="HasItems" Value="false">
                    <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                    <Setter Property="Background" Value="#FFF4F4F4"/>
                </Trigger>
                <Trigger Property="IsGrouping" Value="true">
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </Trigger>
                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                    <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
                    <Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
                </Trigger>
                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                    <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="CboCommomStyle" TargetType="{x:Type ComboBox}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusStyle}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
            <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>

            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="Padding" Value="4,3"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Grid x:Name="MainGrid" SnapsToDevicePixels="true" Margin="1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                            </Grid.ColumnDefinitions>
                            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                                <Border x:Name="Shdw" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=MainGrid}">
                                    <Border x:Name="DropDownBorder" BorderBrush="#FF3D3F4F" BorderThickness="1" Background="#FF777FB0">
                                        <ScrollViewer x:Name="DropDownScrollViewer">
                                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                                <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                    <Rectangle x:Name="OpaqueRect" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}" Fill="#FF14161F"/>
                                                </Canvas>
                                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            </Grid>
                                        </ScrollViewer>
                                    </Border>
                                </Border>
                            </Popup>
                            <ToggleButton Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxReadonlyToggleButton}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="#FF303240"/>
                            <ContentPresenter ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                                <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>

                            </Trigger>
                            <Trigger Property="HasItems" Value="false">
                                <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="BorderBrush" Value="#FF272935"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                <Setter Property="Background" Value="#FFF4F4F4"/>
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </Trigger>
                            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" Value="#FF3F4149"/>
                                <Setter Property="BorderBrush" Value="White"/>
                                <Setter Property="BorderThickness" Value="1"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsEditable" Value="true">
                    <Setter Property="BorderBrush" Value="{StaticResource TextBoxBorder}"/>
                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
                    <Setter Property="IsTabStop" Value="false"/>
                    <Setter Property="Padding" Value="3"/>
                    <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="Background" Value="#FF3E414D"/>
                    <Setter Property="BorderBrush" Value="White"/>
                    <Setter Property="BorderThickness" Value="1"/>
                </Trigger>

            </Style.Triggers>
        </Style>
        <!--combobox样式-->

        <Style x:Key="optionsMarketTitleBorder" TargetType="{x:Type Grid}">
            <Setter Property="Background">
                <Setter.Value>
                    <SolidColorBrush Color="#FF0E0F13" Opacity="0.4"/>
                </Setter.Value>
            </Setter>

        </Style>

        <Style x:Key="textboxStyle" TargetType="{x:Type TextBox}">
            <Setter Property="Foreground" Value="#FF9198AC"/>
            <Setter Property="BorderBrush" Value="#FF2E3143"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="SelectionBrush" Value="#FF3E414D"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBoxBase}">
                        <Border 
          Name="Border"
          CornerRadius="0" 
          Padding="2"
          BorderBrush="#FF2E3143"
          BorderThickness="1" >
                            <Border.Background>
                                <SolidColorBrush Color="Transparent" Opacity="0"/>
                            </Border.Background>
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Border" Property="Background" Value="Transparent"/>
                                <Setter TargetName="Border" Property="BorderBrush">
                                    <Setter.Value>
                                        <SolidColorBrush Color="#FF2E3143" Opacity="0.5"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Foreground">
                                    <Setter.Value>
                                        <SolidColorBrush Color="#FF8A92A9" Opacity="0.5"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="#FF2E3143"/>
                                <Setter TargetName="Border" Property="BorderBrush" Value="#FF007ACC"/>
                                <Setter Property="Foreground" Value="#FF8A92A9"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>

        <!--定义按钮样式-->
        <Style x:Key="marketListViewButtom" TargetType="Button" >
            <!--修改模板属性-->

            <Setter Property="Template">
                <Setter.Value>
                    <!--控件模板-->
                    <ControlTemplate TargetType="Button">
                        <!--只有Grid才能装下这么多Child-->
                        <Grid>
                            <!--带特效的底层背景-->
                            <Border x:Name="back" Opacity="0.8" CornerRadius="0">
                                <Border.BitmapEffect>
                                    <OuterGlowBitmapEffect Opacity="0.8" GlowSize="0" GlowColor="#FF090A0F" />
                                </Border.BitmapEffect>
                                <Rectangle x:Name="buttonRect" Width="49" Height="49">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Offset="0" Color="#FF737A8D"/>
                                            <GradientStop Offset="1" Color="#FF343644"/>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>

                            </Border>

                            <!--按钮内容-->
                            <ContentPresenter 
            Margin="0"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            RecognizesAccessKey="True"
                                />

                        </Grid>
                        <!--触发器-->
                        <ControlTemplate.Triggers>

                            <Trigger Property="Button.IsMouseOver" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>

                                            <ColorAnimation To="#FF959EB6" BeginTime="0:0:0" Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                            <ColorAnimation To="#FF343644" BeginTime="0:0:0" Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>

                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>

                            </Trigger>
                            <Trigger Property="Button.IsPressed" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>

                                            <ColorAnimation To="Transparent" BeginTime="0:0:0" Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                            <ColorAnimation To="#FF8A92A9" BeginTime="0:0:0" Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                                <Setter Property="RenderTransform">
                                    <Setter.Value>
                                        <ScaleTransform ScaleX=".98" ScaleY=".98"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="RenderTransformOrigin" Value=".55,.55"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--定义背景变红的样式-->
        <Style x:Key="marketListViewButtom_red" TargetType="Button" >
            <!--修改模板属性-->

            <Setter Property="Template">
                <Setter.Value>
                    <!--控件模板-->
                    <ControlTemplate TargetType="Button">
                        <!--只有Grid才能装下这么多Child-->
                        <Grid>
                            <!--带特效的底层背景-->
                            <Border x:Name="back" Opacity="0.8" CornerRadius="0" Width="49" Height="30" BorderBrush="#FFFFF300" BorderThickness="0">
                                <Border.BitmapEffect>
                                    <OuterGlowBitmapEffect Opacity="0.8" GlowSize="0" GlowColor="Red" />
                                </Border.BitmapEffect>
                                <Rectangle x:Name="buttonRect" Width="49" Height="30">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Offset="0" Color="Red"/>
                                            <GradientStop Offset="1" Color="#FFFFA200"/>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>

                            </Border>

                            <!--按钮内容-->
                            <ContentPresenter 
            Margin="0"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            RecognizesAccessKey="True"
                                />

                        </Grid>
                        <!--触发器-->
                        <ControlTemplate.Triggers>

                            <Trigger Property="Button.IsMouseOver" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>

                                            <ColorAnimation To="#FFFF5F5F" BeginTime="0:0:0" Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                            <ColorAnimation To="#FFFFD58A" BeginTime="0:0:0" Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>

                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <Trigger Property="Button.IsPressed" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>

                                            <ColorAnimation To="Transparent" BeginTime="0:0:0" Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                            <ColorAnimation To="#FF8A92A9" BeginTime="0:0:0" Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                                <Setter Property="RenderTransform">
                                    <Setter.Value>
                                        <ScaleTransform ScaleX=".98" ScaleY=".98"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="RenderTransformOrigin" Value=".55,.55"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--定义背景变绿的样式-->
        <Style x:Key="marketListViewButtom_green" TargetType="Button" >
            <!--修改模板属性-->

            <Setter Property="Template">
                <Setter.Value>
                    <!--控件模板-->
                    <ControlTemplate TargetType="Button">
                        <!--只有Grid才能装下这么多Child-->
                        <Grid>
                            <!--带特效的底层背景-->
                            <Border x:Name="back" Opacity="0.8" CornerRadius="0" Width="49" Height="30"  BorderBrush="#FFFFF300" BorderThickness="0">
                                <Border.BitmapEffect>
                                    <OuterGlowBitmapEffect Opacity="0.8" GlowSize="0" GlowColor="Red" />
                                </Border.BitmapEffect>
                                <Rectangle x:Name="buttonRect" Width="49" Height="30">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Offset="0" Color="Green"/>
                                            <GradientStop Offset="1" Color="#FFFFF300"/>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>

                            </Border>

                            <!--按钮内容-->
                            <ContentPresenter 
            Margin="0"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            RecognizesAccessKey="True"
                                />

                        </Grid>
                        <!--触发器-->
                        <ControlTemplate.Triggers>

                            <Trigger Property="Button.IsMouseOver" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>

                                            <ColorAnimation To="#FF3ED43E" BeginTime="0:0:0" Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                            <ColorAnimation To="#FFFFFBA0" BeginTime="0:0:0" Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>

                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <Trigger Property="Button.IsPressed" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>

                                            <ColorAnimation To="Transparent" BeginTime="0:0:0" Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                            <ColorAnimation To="#FF8A92A9" BeginTime="0:0:0" Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                                <Setter Property="RenderTransform">
                                    <Setter.Value>
                                        <ScaleTransform ScaleX=".98" ScaleY=".98"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="RenderTransformOrigin" Value=".55,.55"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--定义正常的背景变红的样式-->
        <Style x:Key="marketListViewButtom_red_normal" TargetType="Button" >
            <!--修改模板属性-->

            <Setter Property="Template">
                <Setter.Value>
                    <!--控件模板-->
                    <ControlTemplate TargetType="Button">
                        <!--只有Grid才能装下这么多Child-->
                        <Grid>
                            <!--带特效的底层背景-->
                            <Border x:Name="back" Opacity="0.8" CornerRadius="0">
                                <Border.BitmapEffect>
                                    <OuterGlowBitmapEffect Opacity="0.8" GlowSize="0" GlowColor="Red" />
                                </Border.BitmapEffect>
                                <Rectangle x:Name="buttonRect" Width="49" Height="30">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Offset="0" Color="Red"/>
                                            <GradientStop Offset="1" Color="#FF272935"/>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>

                            </Border>

                            <!--按钮内容-->
                            <ContentPresenter 
            Margin="0"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            RecognizesAccessKey="True"
                                />

                        </Grid>
                        <!--触发器-->
                        <ControlTemplate.Triggers>

                            <Trigger Property="Button.IsMouseOver" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>

                                            <ColorAnimation To="#FFFFA0A0" BeginTime="0:0:0" Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                            <ColorAnimation To="#FF272935" BeginTime="0:0:0" Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>

                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <Trigger Property="Button.IsPressed" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>

                                            <ColorAnimation To="Transparent" BeginTime="0:0:0" Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                            <ColorAnimation To="#FF8A92A9" BeginTime="0:0:0" Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                                <Setter Property="RenderTransform">
                                    <Setter.Value>
                                        <ScaleTransform ScaleX=".98" ScaleY=".98"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="RenderTransformOrigin" Value=".55,.55"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--定义正常背景变绿的样式-->
        <Style x:Key="marketListViewButtom_green_normal" TargetType="Button" >
            <!--修改模板属性-->

            <Setter Property="Template">
                <Setter.Value>
                    <!--控件模板-->
                    <ControlTemplate TargetType="Button">
                        <!--只有Grid才能装下这么多Child-->
                        <Grid>
                            <!--带特效的底层背景-->
                            <Border x:Name="back" Opacity="0.8" CornerRadius="0">
                                <Border.BitmapEffect>
                                    <OuterGlowBitmapEffect Opacity="0.8" GlowSize="0" GlowColor="Red" />
                                </Border.BitmapEffect>
                                <Rectangle x:Name="buttonRect" Width="49" Height="30">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Offset="0" Color="Green"/>
                                            <GradientStop Offset="1" Color="#FF272935"/>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>

                            </Border>

                            <!--按钮内容-->
                            <ContentPresenter 
            Margin="0"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            RecognizesAccessKey="True"
                                />

                        </Grid>
                        <!--触发器-->
                        <ControlTemplate.Triggers>

                            <Trigger Property="Button.IsMouseOver" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>

                                            <ColorAnimation To="#FF07C307" BeginTime="0:0:0" Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                            <ColorAnimation To="#FF272935" BeginTime="0:0:0" Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>

                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <Trigger Property="Button.IsPressed" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>

                                            <ColorAnimation To="Transparent" BeginTime="0:0:0" Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                            <ColorAnimation To="#FF8A92A9" BeginTime="0:0:0" Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)" />
                                            <ColorAnimation Duration="0:0:0.15" Storyboard.TargetName="buttonRect" Storyboard.TargetProperty="(Rectangle.Fill).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                                <Setter Property="RenderTransform">
                                    <Setter.Value>
                                        <ScaleTransform ScaleX=".98" ScaleY=".98"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="RenderTransformOrigin" Value=".55,.55"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <!--侧边按钮-->
        <Style x:Key="leftAndRightButtom" TargetType="Button" >
            <!--修改模板属性-->

            <Setter Property="Template">
                <Setter.Value>
                    <!--控件模板-->
                    <ControlTemplate TargetType="Button">
                        <!--只有Grid才能装下这么多Child-->
                        <Grid>
                            <!--带特效的底层背景-->
                            <Border x:Name="back" Opacity="0.8" CornerRadius="0" Background="Black" >
                            </Border>

                            <!--按钮内容-->
                            <ContentPresenter 
            Margin="0"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            RecognizesAccessKey="True"
                                />

                        </Grid>
                        <!--触发器-->
                        <ControlTemplate.Triggers>

                            <Trigger Property="Button.IsMouseOver" Value="True">
                                <Setter TargetName="back" Property="BorderBrush" Value="#FF0076C8"/>
                                <Setter TargetName="back" Property="BorderThickness" Value="0,5,0,0"/>
                            </Trigger>

                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--darkRectangleStyle，黑幕布-->
        <Style x:Key="darkRectangleStyle" TargetType="Button" >
            <!--修改模板属性-->

            <Setter Property="Template">
                <Setter.Value>
                    <!--控件模板-->
                    <ControlTemplate TargetType="Button">
                        <!--只有Grid才能装下这么多Child-->
                        <Grid>
                            <Rectangle HorizontalAlignment="Stretch" Height="Auto" Margin="0,0,0,0" VerticalAlignment="Stretch" Width="Auto">
                                <Rectangle.Fill>
                                    <SolidColorBrush Color="Black" Opacity="0.65"/>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </Window.Resources>

    <Window.Effect>
        <DropShadowEffect Direction="270" Opacity="0.75" ShadowDepth="3" BlurRadius="7" Color="#FF007ACC"/>
    </Window.Effect>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>

        <Frame x:Name="Top1" Content="" HorizontalAlignment="Left" Height="38" VerticalAlignment="Top" Width="1185" Background="#FF1B1B1F" MouseDown="Top1_MouseDown" MouseDoubleClick="Top1_MouseDoubleClick"/>

        <Button x:Name="minButton" Margin="0,11,51,0" Click="MinButton_Click_1" Focusable="False" Height="12" Width="15" VerticalAlignment="Top" HorizontalAlignment="Right" Style="{StaticResource minSty}"/>
        <Button x:Name="maxButton" Margin="0,12,31,0" Click="MaxButton_Click_1" Focusable="False" Height="12" Width="15" VerticalAlignment="Top" HorizontalAlignment="Right" Style="{StaticResource maxSty}"/>
        <Button x:Name="closeButton" Margin="0,11,10,0" Click="CloseButton_Click_1" Focusable="False" Height="12" Width="15" VerticalAlignment="Top" HorizontalAlignment="Right" Style="{StaticResource closeSty}"/>
        <!--行情区-->
        <Grid x:Name="Grid1" HorizontalAlignment="Left" Height="356" Margin="29,38,0,0" VerticalAlignment="Top" Width="1127" ClipToBounds="True" Background="#FF292932" MouseEnter="Grid1_MouseEnter" MouseLeave="Grid1_MouseLeave">
            <Grid.RowDefinitions>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>

            <Canvas x:Name="TopCanvas1" HorizontalAlignment="Right" Height="356" Margin="0" VerticalAlignment="Bottom" Width="1127">
                <!--指定种类、交易商、标的资产、到期年月、交易账户-->
                <Grid x:Name="TopCanvasButtomGrid" HorizontalAlignment="Left" Height="29" VerticalAlignment="Top" Width="1128" Canvas.Bottom="1" Background="#FF101013" Canvas.Top="1" MouseEnter="TopCanvasButtomGrid_MouseEnter" MouseLeave="TopCanvasButtomGrid_MouseLeave">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <Label  x:Name="typeLabel" Content="衍生品种类" HorizontalAlignment="Left" VerticalAlignment="Center" Foreground="White" Background="{x:Null}" Margin="10,2,0,1" Height="26"/>
                    <ComboBox x:Name="typeComboBox" IsReadOnly="True" Style="{StaticResource CboCommomStyle}" BorderBrush="#FF414551" Foreground="White" FlowDirection="LeftToRight" Margin="77,3,0,0" HorizontalAlignment="Left" Width="70" Height="23" VerticalAlignment="Top" SelectionChanged="typeComboBox_SelectionChanged" >
                        <ComboBoxItem x:Name="futuresComboBoxItem" Content="期货" HorizontalAlignment="Left" Width="65" Selected="futuresComboBoxItem_Selected"/>
                        <ComboBoxItem x:Name="optionsComboBoxItem" Content="期权" HorizontalAlignment="Left" Width="65" Selected="optionsComboBoxItem_Selected" />
                    </ComboBox>
                    <Label x:Name="exchangeNameLabel" Content="交易商" HorizontalAlignment="Left" VerticalAlignment="Center" Foreground="White" RenderTransformOrigin="0.522,0.52" Background="{x:Null}" Margin="155,2,0,4" Height="23" />
                    <ComboBox x:Name="traderComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="67" SelectedIndex="0" Style="{StaticResource CboCommomStyle}" BorderBrush="#FF414551" Foreground="White" FlowDirection="LeftToRight" RenderTransformOrigin="0.5,0.522" Margin="197,3,0,0" SelectionChanged="traderComboBox_SelectionChanged" >
                        <ComboBoxItem x:Name="traderComboBoxItem3" Content=" 中金所" HorizontalAlignment="Left" Width="80"/>
                        <ComboBoxItem x:Name="traderComboBoxItem4" Content=" 郑商所" HorizontalAlignment="Left" Width="80"/>
                        <ComboBoxItem x:Name="traderComboBoxItem1" Content=" 上期所" HorizontalAlignment="Left" Width="80"/>
                    </ComboBox>
                    <Label x:Name="subjectMatterLabel" Content="标的商品" HorizontalAlignment="Left" VerticalAlignment="Center" Foreground="White" Background="{x:Null}" Margin="273,3,0,3" Height="23" />
                    <ComboBox x:Name="subjectMatterComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="113" SelectedIndex="0" Style="{StaticResource CboCommomStyle}" Foreground="White" BorderBrush="#FF414551" FlowDirection="LeftToRight" Margin="327,3,0,0" SelectionChanged="subjectMatterComboBox_SelectionChanged">
                    </ComboBox>
                    <Label x:Name="dueDateLabel" Content="到期年月" HorizontalAlignment="Left" VerticalAlignment="Center" Foreground="White" Background="{x:Null}" Margin="448,2,0,1" Height="26" />
                    <ComboBox x:Name="dueDateComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="80" SelectedIndex="0" Style="{StaticResource CboCommomStyle}" Foreground="White" BorderBrush="#FF414551" FlowDirection="LeftToRight" Margin="502,3,0,0" SelectionChanged="dueDateComboBox_SelectionChanged" />
                    <Label x:Name="userLabel" Content="投资账户" HorizontalAlignment="Left" VerticalAlignment="Center" Foreground="White" Background="{x:Null}" Margin="601,2,0,1" Height="26" />
                    <ComboBox x:Name="userComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="80" Style="{StaticResource CboCommomStyle}" SelectedIndex="0" Foreground="White" BorderBrush="#FF414551" FlowDirection="LeftToRight" Margin="655,3,0,0" />

                </Grid>

                <ListView x:Name="futuresMarketListView" ItemsSource="{Binding Mode=OneWay}" DataContext="{Binding Mode=OneWay}"  Height="326" MaxWidth="903" Width="903"  Background="#FF292932" BorderBrush="{x:Null}" BorderThickness="0" HorizontalAlignment="Left" VerticalAlignment="Top" Style="{StaticResource futureListViewStyle}"  ScrollViewer.HorizontalScrollBarVisibility="Visible" ScrollViewer.VerticalScrollBarVisibility="Visible" FlowDirection="LeftToRight" Canvas.Top="30" Visibility="Hidden" Foreground="White" SelectionChanged="futuresMarketListView_SelectionChanged">
                    <ListView.View>
                        <GridView AllowsColumnReorder="True">
                            <GridViewColumn x:Name="instrumentIDFMGVCH" DisplayMemberBinding="{Binding InstrumentID}" Header=" 合约代码" Width=" 100" />
                            <!--0-->
                            <GridViewColumn x:Name="instrumentNameFMGVCH" DisplayMemberBinding="{Binding InstrumentName}" Header=" 名称" Width=" 100" />
                            <GridViewColumn x:Name="lastPriceFMGVCH"   Header="最新价格" Width=" 100">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="lastFMLab" Content="{Binding LastPrice,UpdateSourceTrigger=PropertyChanged}" Width="Auto" MinWidth="60" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn x:Name="askPriceFMGVCH" Header="卖价" Width=" 100">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Button x:Name="askFMBtn" Content="{Binding AskPrice1}" Tag="{Binding InstrumentID}" Width="100" HorizontalAlignment="Center" VerticalAlignment="Center"  Style="{StaticResource marketListViewButtom}" Click="askFMBtn_Click" Foreground="White"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn x:Name="bidPriceFMGVCH" Header="买价" Width=" 100">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Button x:Name="bidFMBtn" Content="{Binding BidPrice1}"  Tag="{Binding InstrumentID}" Width="100" HorizontalAlignment="Center" VerticalAlignment="Center"  Style="{StaticResource marketListViewButtom}" Foreground="White" Click="bidFMBtn_Click" />
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <!--4-->
                            <GridViewColumn x:Name="bidVolumeFMGVCH"  Header="买量" Width=" 100">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="bidFMLab" Content="{Binding BidVolume1}" Width="100" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="#FF9198AC"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>


                            <GridViewColumn x:Name="askVolumeFMGVCH"   Header="卖量" Width=" 100">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="openFMLab" Content="{Binding AskVolume1}" Width="100" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>


                            <GridViewColumn x:Name="openInterestFMGVCH"   Header="成交量" Width=" 100">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="openFMLab" Content="{Binding OpenInterest}" Width="100" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>


                            <!--7-->
                            <GridViewColumn x:Name="openPriceFMGVCH"   Header="今日开盘价" Width=" 100">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="openFMLab" Content="{Binding OpenPrice}" Width="Auto" MinWidth="60" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"  Foreground="White"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <GridViewColumn x:Name="riseAndFallFMGVCH"  Header="涨跌" Width=" 100">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="riseFMLab" Content="{Binding RiseAndFall}" Width="Auto" MinWidth="50" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <GridViewColumn x:Name="riseAndFallRateFMGVCH"   Header="涨幅%" Width=" 100">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="riseRateFMLab" Content="{Binding RiseAndFallRate}" Width="Auto" MinWidth="50" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <!--10-->
                            <GridViewColumn x:Name="highestPriceFMGVCH"   Header="最高价" Width=" 100">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="highestFMLab" Content="{Binding HighestPrice}" Width="Auto" MinWidth="60" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <GridViewColumn x:Name="lowestPriceFMGVCH"   Header="最低价" Width=" 100">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="lowestFMLab" Content="{Binding LowestPrice}" Width="Auto" MinWidth="60" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <GridViewColumn x:Name="upperLimitPriceFMGVCH"  Header="涨停板价" Width=" 100">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="upperFMLab" Content="{Binding UpperLimitPrice}" Width="Auto" MinWidth="60" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="#FF9198AC"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <!--13-->
                            <GridViewColumn x:Name="lowerLimitPriceFMGVCH"   Header="跌停板价" Width=" 100">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="lowerFMLab" Content="{Binding LowerLimitPrice}" Width="Auto" MinWidth="60" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <GridViewColumn x:Name="preSettlementPriceFMGVCH"  Header="昨日结算价" Width=" 100">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="preSettleFMLab" Content="{Binding PreSettlementPrice}" Width="100" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>


                            <GridViewColumn x:Name="preClosePriceFMGVCH"  Header="昨日收盘价" Width=" 100">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="preCloseFMLab" Content="{Binding PreClosePrice}" Width="100" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>


                            <GridViewColumn x:Name="preOpenInterestFMGVCH"  Header="昨日成交量" Width=" 100">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="preOpenFMLab" Content="{Binding PreOpenInterest}" Width="100" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                        </GridView>
                    </ListView.View>
                </ListView>

                <ListView x:Name="subjectMatterMarketGrid" ItemsSource="{Binding Mode=OneWay}" DataContext="{Binding Mode=OneWay}"   Height="61" Canvas.Top="30" MaxWidth="903" Width="903" Background="#FF292932" BorderBrush="{x:Null}" BorderThickness="0" HorizontalAlignment="Left" VerticalAlignment="Top" Style="{StaticResource futureListViewStyle}"  ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Hidden" FlowDirection="LeftToRight" Foreground="White" SelectionChanged="subjectMatterMarketGrid_SelectionChanged">
                    <ListView.View>
                        <GridView AllowsColumnReorder="True">

                            <GridViewColumn x:Name="SMMG1"  Header=" 最新价" Width="80">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="SMMGLab1" Content="{Binding LastPrice,UpdateSourceTrigger=PropertyChanged}" MinWidth="50" Width="Auto" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <GridViewColumn x:Name="SMMG2"  Header=" 涨跌" Width="80">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="SMMGLab2" Content="{Binding RiseAndFall}" MinWidth="50" Width="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <GridViewColumn x:Name="SMMG3"  Header=" 涨跌幅" Width=" 80">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="SMMGLab3" Content="{Binding RiseAndFallRate}" MinWidth="50" Width="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <GridViewColumn x:Name="SMMG4"  Header=" 买价" Width=" 80">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="SMMGLab4" Content="{Binding BidPrice1}" MinWidth="60" Width="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <GridViewColumn x:Name="SMMG5"  Header=" 卖价" Width=" 80">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="SMMGLab5" Content="{Binding AskPrice1}" MinWidth="60" Width="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <GridViewColumn x:Name="SMMG6"  Header=" 最高价" Width=" 90">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="SMMGLab6" Content="{Binding HighestPrice}" MinWidth="60" Width="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <GridViewColumn x:Name="SMMG7"  Header=" 最低价" Width=" 90">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="SMMGLab7" Content="{Binding LowestPrice}" MinWidth="60" Width="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <GridViewColumn x:Name="SMMG8"  Header=" 成交量" Width=" 90">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="SMMGLab8" Content="{Binding OpenInterest}" Width="100" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <GridViewColumn x:Name="SMMG9"  Header=" 到期日" Width=" 100">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="SMMGLab9" Content="{Binding LastDate}" Width="100" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <GridViewColumn x:Name="SMMG10"  Header=" 更新时间" Width="130">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="SMMGLab10" Content="{Binding UpdateTime}" Width="130" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>


                        </GridView>
                    </ListView.View>

                </ListView>
                <Border x:Name="titileBorder4" BorderBrush="#FF7B7F95" BorderThickness="0,2,0,0" Grid.Column="2" Height="25" VerticalAlignment="Stretch" MaxWidth="903" Width="903" MaxHeight="25" ScrollViewer.VerticalScrollBarVisibility="Disabled" UseLayoutRounding="True" AllowDrop="True" ClipToBounds="True" HorizontalAlignment="Left" Canvas.Top="91" >
                    <Grid x:Name="optionsMarketTitleGrid" Style="{StaticResource optionsMarketTitleBorder}" MaxWidth="903" Width="903" FlowDirection="LeftToRight" MaxHeight="25" ScrollViewer.VerticalScrollBarVisibility="Disabled" HorizontalAlignment="Left" Canvas.Top="100" RenderTransformOrigin="0.5,0.5" MouseEnter="optionsMarketTitleGrid_MouseEnter" MouseLeave="optionsMarketTitleGrid_MouseLeave" Margin="0" VerticalAlignment="Top" >

                        <Grid.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform/>
                                <SkewTransform/>
                                <RotateTransform Angle="0.002"/>
                                <TranslateTransform/>
                            </TransformGroup>
                        </Grid.RenderTransform>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="395" />
                            <ColumnDefinition Width="107" />
                            <ColumnDefinition Width="400" />
                        </Grid.ColumnDefinitions>


                        <Border BorderThickness="0,0,1,0" HorizontalAlignment="Left" Height="25" VerticalAlignment="Top" Width="402" MaxWidth="403" MaxHeight="25" ScrollViewer.VerticalScrollBarVisibility="Disabled" BorderBrush="#FF414559" Grid.ColumnSpan="2" Margin="0,0,0,-2" />
                        <Border BorderBrush="#FF414559" BorderThickness="0,0,1,0" Grid.Column="1" HorizontalAlignment="Left" Height="25" VerticalAlignment="Top" Width="79" MaxWidth="79" MaxHeight="25" ScrollViewer.VerticalScrollBarVisibility="Disabled" Margin="7,0,0,-2"/>
                        <Border BorderBrush="#FF414559" BorderThickness="0,0,1,0" Grid.Column="1" HorizontalAlignment="Left" Height="25" VerticalAlignment="Top" Width="402" MaxWidth="402" MaxHeight="25" ScrollViewer.VerticalScrollBarVisibility="Disabled" Margin="84,0,0,-2" Grid.ColumnSpan="2" />

                        <TextBlock Text=" 看涨" TextAlignment="Center" Grid.Row=" 0" Grid.Column=" 0" Margin="3,-1,101,1" Padding="0,4,0,0" MaxWidth="400" MaxHeight="25" Foreground="White" Grid.ColumnSpan="2" FontSize="14" FontWeight="Bold"/>
                        <TextBlock Text=" 看跌" TextAlignment="Center" Grid.Row=" 0" Grid.Column="1" Padding="0,4,0,0" MaxWidth="400" MaxHeight="25" Foreground="White" Grid.ColumnSpan="2" Margin="79,-1,31,1" FontSize="14" FontWeight="Bold"/>
                    </Grid>
                </Border>
                <ListView x:Name="optionsMarketListView" ItemsSource="{Binding Mode=OneWay}" DataContext="{Binding Mode=OneWay}" Height="240" MaxWidth="903" Width="903" VerticalAlignment="Top" HorizontalAlignment="Left" Background="{x:Null}" BorderBrush="#FF666C89" BorderThickness="0,0,1,1" Foreground="White" Style="{StaticResource futureListViewStyle}" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Visible" FlowDirection="LeftToRight" Canvas.Top="116" SelectionChanged="optionsMarketListView_SelectionChanged" >
                    <ListView.View>
                        <GridView AllowsColumnReorder="True">
                            <GridViewColumn x:Name="bidPriceROMGVCH" Header=" 买价" Width="80">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Button x:Name="bidROMBtn" Content="{Binding BidPrice1, Mode=OneWay}" Width=" 80" Tag="{Binding ExercisePrice}" Style="{StaticResource marketListViewButtom}" Click="bidROMBtn_Click" Foreground="White" />
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn x:Name="askPriceROMGVCH" Header=" 卖价" Width="80">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Button x:Name="askROMBtn" Content="{Binding AskPrice1, Mode=OneWay}" Tag="{Binding ExercisePrice}" Width="80" Style="{StaticResource marketListViewButtom}" Background="#FFE6E6E6" BorderBrush="White" Foreground="White"  Click="askROMBtn_Click"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn x:Name="lastPriceROMGVCH" Header=" 最新价"  Width="80">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="lastPriceROMBox"  Content="{Binding LastPrice1}" Width=" 80" HorizontalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White"    />
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn x:Name="volumeROMGVCH" Header=" 现量"  Width="80">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="volumeROMBox"  Content="{Binding Volume1}" Width=" 80" HorizontalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="#FFFBFBFB"    />
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <GridViewColumn x:Name="openInterestROMGVCH" Header=" 成交量"  Width=" 80">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="openROMBox"  Content="{Binding OpenInterest1}" Width=" 80" HorizontalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White"    />
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <GridViewColumn x:Name="exercisePriceOMGVCH" Header=" 行权价"  Width=" 80">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Border Margin="0" Background="#FFA6A9B9">
                                            <Label Content="{Binding ExercisePrice}" Width=" 80" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" HorizontalAlignment="Center" Foreground="#FF0E0F13"    />
                                        </Border>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <GridViewColumn x:Name="openInterestDOMGVCH" Header=" 成交量"  Width=" 80">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="openDOMBox"  Content="{Binding OpenInterest2}" Width=" 80" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" HorizontalAlignment="Center" Foreground="White"    />
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <GridViewColumn x:Name="volumeDOMGVCH" Header=" 现量"  Width=" 80">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="volumeDOMBox"  Content="{Binding Volume2}" Width=" 80" HorizontalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White"    />
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <GridViewColumn x:Name="lastPriceDOMGVCH" Header=" 最新价"  Width="80">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Label x:Name="lastPriceDOMBox" Content="{Binding LastPrice2}" Width=" 80" HorizontalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White"    />
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <GridViewColumn x:Name="askPriceDOMGVCH" Header=" 卖价" Width=" 80">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Button x:Name="askDOMBtn" Content="{Binding AskPrice2}" Tag="{Binding ExercisePrice}" Width="80" Style="{StaticResource marketListViewButtom}" Foreground="White" Click="askDOMBtn_Click"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn x:Name="bidPriceDOMGVCH" Header=" 买价" Width=" 80">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Button x:Name="bidDOMBtn" Content="{Binding BidPrice2}" Tag="{Binding ExercisePrice}" Width="80" Style="{StaticResource marketListViewButtom}" Foreground="White" Click="bidDOMBtn_Click"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                        </GridView>
                    </ListView.View>
                </ListView>

                <!--走势图&盈亏图&概率图-->
                <TabControl x:Name="chartTabControl" HorizontalAlignment="Left" Height="326" VerticalAlignment="Top" Width="224" Canvas.Left="903" Canvas.Top="30" Background="{x:Null}" BorderBrush="{x:Null}">
                    <TabItem Header="走势图" Margin="0,0,-6,-6" Style="{StaticResource TabItemStyle}" Foreground="#FFF2F4F8">
                        <Canvas x:Name="trendChartGrid" Background="#FF0C0E16">
                            <!--走势图-->
                            <ams:StockChart Name="stockChart" Grid.Row="1" Foreground="#FFEDEDED" Background="#00000000" PeriodSelectorVisibility="Hidden" Width="188" Height="143" MaximumDataGroupingInterval="Day" MinimumDataGroupingInterval="Minute" StartDate="07/23/2014 09:31:00" Canvas.Left="20" Canvas.Top="25">
                                <ams:StockChart.DataSets>
                                    <ams:DataSet Name="stockSet1" Brush="#7f8da9"
                                
                                DateMemberPath="date"
                                OpenMemberPath="open" HighMemberPath="high"
                                LowMemberPath="low" CloseMemberPath="close"
                                ValueMemberPath="close" VolumeMemberPath="volume"
                                
                     />
                                </ams:StockChart.DataSets>


                                <!--走势图-->
                                <ams:StockChart.Charts>

                                    <ams:Chart Title="" GridHeight="2*" Background="#00000000">
                                        <ams:Chart.Graphs>
                                            <ams:Graph GraphType="Line" 
                                    NegativeBrush="Green" PositiveBrush="Red" 
                                    LegendItemType="Ohlc" LegendPeriodItemType="Ohlc"
                                    CursorBrush="Blue" CursorSize="6" 
                                    IsFilled="False" 
                                   />
                                            <ams:Graph GraphType="Line" 
                                    NegativeBrush="Green" PositiveBrush="Red" 
                                    LegendItemType="Ohlc" LegendPeriodItemType="Ohlc"
                                    CursorBrush="Blue" CursorSize="6" 
                                    IsFilled="False" 
                                   />

                                        </ams:Chart.Graphs>

                                        <ams:Chart.DateTimeAxis>
                                            <ams:DateTimeAxis ValuesForeground="#90000000" StrokeThickness="0" TickLength="0" 
                                            />
                                        </ams:Chart.DateTimeAxis>

                                        <ams:Chart.LeftValueAxis>
                                            <ams:ValueAxis ValuesForeground="#90000000"
                                StrokeThickness="0" TickLength="0" />
                                        </ams:Chart.LeftValueAxis>

                                        <ams:Chart.Legend>
                                            <ams:Legend
                            PositiveValueForeground="Red" NegativeValueForeground="Green"
                            IsDateVisible="True" Background="#00000000"/>
                                        </ams:Chart.Legend>
                                    </ams:Chart>


                                    <ams:Chart Name="Chart1" Title="" GridHeight="2*" Background="#00000000">
                                        <ams:Chart.Graphs>
                                            <ams:Graph GraphType="Line" 
                                    NegativeBrush="Green" PositiveBrush="Red" 
                                    LegendItemType="Ohlc" LegendPeriodItemType="Ohlc"
                                    CursorBrush="Blue" CursorSize="6" 
                                    IsFilled="True" 
                                   />
                                            <!--<ams:Graph GraphType="Column" 
                                    NegativeBrush="Green" PositiveBrush="Red" 
                                    LegendItemType="None" LegendPeriodItemType="None"
                                    CursorBrush="Blue" CursorSize="6" />-->

                                        </ams:Chart.Graphs>

                                        <ams:Chart.DateTimeAxis>
                                            <ams:DateTimeAxis Name="timeAxis" ValuesForeground="#90000000" StrokeThickness="0" TickLength="0" 
                                            />
                                        </ams:Chart.DateTimeAxis>

                                        <ams:Chart.LeftValueAxis>
                                            <ams:ValueAxis ValuesForeground="#90000000"
                                StrokeThickness="0" TickLength="0" />
                                        </ams:Chart.LeftValueAxis>

                                        <ams:Chart.Legend>
                                            <ams:Legend
                            PositiveValueForeground="Red" NegativeValueForeground="Green"
                            IsDateVisible="True" Background="#00000000"/>
                                        </ams:Chart.Legend>
                                    </ams:Chart>
                                    <!--成交量的Chart-->
                                    <ams:Chart Title="">
                                        <ams:Chart.Graphs>
                                            <ams:Graph GraphType="Column"
                                    LegendItemType="Value" LegendPeriodItemType="Value"
                                    DataField="Volume" PeriodValue="Sum"
                                    CursorBrush="Yellow" CursorSize="6"
                                    />
                                        </ams:Chart.Graphs>

                                        <ams:Chart.DateTimeAxis>
                                            <ams:DateTimeAxis ValuesEnabled="False" StrokeThickness="0" />
                                        </ams:Chart.DateTimeAxis>

                                        <ams:Chart.LeftValueAxis>
                                            <ams:ValueAxis ValuesForeground="#90000000"
                                StrokeThickness="0" TickLength="0"
                                />
                                        </ams:Chart.LeftValueAxis>

                                        <ams:Chart.Legend>
                                            <ams:Legend PositiveValueForeground="Red" NegativeValueForeground="Green" />
                                        </ams:Chart.Legend>
                                    </ams:Chart>


                                </ams:StockChart.Charts>

                            </ams:StockChart>
                            <ams:StockChart Name="stockChart2" Grid.Row="1" Foreground="#FFEDEDED" Background="#00000000" PeriodSelectorVisibility="Hidden" Width="198" Height="122" MaximumDataGroupingInterval="Day" MinimumDataGroupingInterval="Minute" StartDate="07/23/2014 09:31:00" Canvas.Top="168" Canvas.Left="10">
                                <ams:StockChart.DataSets>
                                    <ams:DataSet Name="stockSet2" Brush="#7f8da9"
                                
                                DateMemberPath="date"
                                OpenMemberPath="open" HighMemberPath="high"
                                LowMemberPath="low" CloseMemberPath="close"
                                ValueMemberPath="close" VolumeMemberPath="volume"
                                
                     />
                                    <!--<ams:DataSet Name="stockSet2" Brush="Yellow"
                                
                                DateMemberPath="date"
                                OpenMemberPath="open" HighMemberPath="high"
                                LowMemberPath="low" CloseMemberPath="close"
                                ValueMemberPath="close" VolumeMemberPath="volume"
                             
  
                                />-->
                                    <!--ItemsSource="{Binding Data}"-->
                                </ams:StockChart.DataSets>


                                <!--走势图-->
                                <ams:StockChart.Charts>

                                    <ams:Chart Title="价格" GridHeight="2*" Background="#00000000">
                                        <ams:Chart.Graphs>
                                            <ams:Graph GraphType="Line" 
                                    NegativeBrush="Green" PositiveBrush="Red" 
                                    LegendItemType="Ohlc" LegendPeriodItemType="Ohlc"
                                    CursorBrush="Blue" CursorSize="6" 
                                    IsFilled="False" 
                                   />
                                            <ams:Graph GraphType="Line" 
                                    NegativeBrush="Green" PositiveBrush="Red" 
                                    LegendItemType="Ohlc" LegendPeriodItemType="Ohlc"
                                    CursorBrush="Blue" CursorSize="6" 
                                    IsFilled="False" 
                                   />

                                        </ams:Chart.Graphs>

                                        <ams:Chart.DateTimeAxis>
                                            <ams:DateTimeAxis ValuesForeground="#90000000" StrokeThickness="0" TickLength="0" 
                                            />
                                        </ams:Chart.DateTimeAxis>

                                        <ams:Chart.LeftValueAxis>
                                            <ams:ValueAxis ValuesForeground="#90000000"
                                StrokeThickness="0" TickLength="0" />
                                        </ams:Chart.LeftValueAxis>

                                        <ams:Chart.Legend>
                                            <ams:Legend
                            PositiveValueForeground="Red" NegativeValueForeground="Green"
                            IsDateVisible="True" Background="#00000000"/>
                                        </ams:Chart.Legend>
                                    </ams:Chart>


                                    <ams:Chart Name="Chart2" Title="" GridHeight="2*" Background="#00000000">
                                        <ams:Chart.Graphs>
                                            <ams:Graph GraphType="Line" 
                                    NegativeBrush="Green" PositiveBrush="Red" 
                                    LegendItemType="Ohlc" LegendPeriodItemType="Ohlc"
                                    CursorBrush="Blue" CursorSize="6" 
                                    IsFilled="True" 
                                   />

                                        </ams:Chart.Graphs>

                                        <ams:Chart.DateTimeAxis>
                                            <ams:DateTimeAxis Name="timeAxis2" ValuesForeground="#90000000" StrokeThickness="0" TickLength="0" 
                                            />
                                        </ams:Chart.DateTimeAxis>

                                        <ams:Chart.LeftValueAxis>
                                            <ams:ValueAxis ValuesForeground="#90000000"
                                StrokeThickness="0" TickLength="0" />
                                        </ams:Chart.LeftValueAxis>

                                        <ams:Chart.Legend>
                                            <ams:Legend
                            PositiveValueForeground="Red" NegativeValueForeground="Green"
                            IsDateVisible="True" Background="#00000000"/>
                                        </ams:Chart.Legend>
                                    </ams:Chart>

                                    <ams:Chart Title="">
                                        <ams:Chart.Graphs>
                                            <ams:Graph GraphType="Column"
                                    LegendItemType="Value" LegendPeriodItemType="Value"
                                    DataField="Volume" PeriodValue="Sum"
                                    CursorBrush="Yellow" CursorSize="6"
                                    />
                                        </ams:Chart.Graphs>

                                        <ams:Chart.DateTimeAxis>
                                            <ams:DateTimeAxis ValuesEnabled="False" StrokeThickness="0" />
                                        </ams:Chart.DateTimeAxis>

                                        <ams:Chart.LeftValueAxis>
                                            <ams:ValueAxis ValuesForeground="#90000000"
                                StrokeThickness="0" TickLength="0"
                                />
                                        </ams:Chart.LeftValueAxis>

                                        <ams:Chart.Legend>
                                            <ams:Legend PositiveValueForeground="Red" NegativeValueForeground="Green" />
                                        </ams:Chart.Legend>
                                    </ams:Chart>

                                </ams:StockChart.Charts>

                            </ams:StockChart>

                            <Button x:Name="ZoomInZS1" Content="+" Canvas.Left="178" Canvas.Top="10" Width="21" Click="ZoomInZS1_Click" Visibility="Hidden"/>
                            <Button x:Name="ZoomInZS2" Content="+" Canvas.Left="178" Canvas.Top="168" Width="21" Click="ZoomInZS2_Click" Visibility="Hidden"/>

                        </Canvas>
                    </TabItem>

                    <TabItem Header="盈亏图/概率图" Margin="8,0,-14,-6" Style="{StaticResource TabItemStyle}" Foreground="#FFF2F4F8">
                        <Canvas x:Name="probaAndProfitChartCanvas" Background="#FF0C0E16">
                            <!--这里放概率图-->
                            <am:LineChart x:Name="VolatilityChart" Height="133" Foreground="LightGray"
                      
					BorderBrush="Transparent" BorderThickness="0" VerticalAlignment="Top" Background="Transparent" Canvas.Left="23" Canvas.Top="21" BalloonForeground="#FFECECEC" BalloonsEnabled="True" IndicatorStroke="#FF1A6E95" IsIndicatorEnabled="True" IsZoomable="False" IndicatorBalloonForeground="#FFDEDEDE" LegendEnabled="False" PlotAreaMargin="0,0,0,0" PlotAreaBackground="{x:Null}" ScrollerLocation="Bottom" ScrollBarVisibilty="Visible" VerticalLinesClustered="True" ZoomOutButtonHoverForeground="#FF5EB1E0" ZoomOutButtonMargin="0" ZoomOutButtonForeground="#FF249DE2" Width="181">

                                <am:LineChart.CategoryAxis>
                                    <am:CategoryAxis StrokeThickness="0"/>
                                </am:LineChart.CategoryAxis>
                                <am:LineChart.CategoryAxisGrid>
                                    <am:CategoryGrid Stroke="#02FFFFFF"/>
                                </am:LineChart.CategoryAxisGrid>
                                <am:LineChart.LeftValueAxisGrid>
                                    <am:ValueGrid Stroke="#02FFFFFF"/>
                                </am:LineChart.LeftValueAxisGrid>
                                <am:LineChart.LeftValueAxis>
                                    <am:ValueAxis StrokeThickness="0"/>
                                </am:LineChart.LeftValueAxis>
                                <am:LineChartGraph x:Name="VolatilityGraph" AreaFillOpacity="1" AreaFill="#FFD46459" BalloonBackground="sc#1, 0.4452012, 0.08650046, 0.0202885624" BulletType="None" Brush="#00000000" Height="141" IsFilled="True" Width="95"/>
                                <am:LineChartGraph x:Name="VolatilityGraph2" AreaFillOpacity="1" AreaFill="#FF46C55D" BalloonBackground="sc#1, 0.4452012, 0.08650046, 0.0202885624" BulletType="None" Brush="#00D7D7EE" Height="72" IsFilled="True" Width="237"/>
                            </am:LineChart>


                            <!--这里放盈亏图-->

                            <am:LineChart x:Name="VolatilityChart2" Height="130"
					Background="Transparent" Foreground="#FFECECEC"
                      
					BorderBrush="Transparent" BorderThickness="0" VerticalAlignment="Top" Canvas.Top="154" Canvas.Left="23" BalloonForeground="#FFECECEC" BalloonsEnabled="True" IndicatorStroke="#FF1A6E95" IsIndicatorEnabled="True" IsZoomable="False" IndicatorBalloonForeground="#FFDEDEDE" LegendEnabled="False" PlotAreaMargin="0,0,0,0" PlotAreaBackground="{x:Null}" ScrollerLocation="Bottom" ScrollBarVisibilty="Visible" VerticalLinesClustered="True" ZoomOutButtonHoverForeground="#FF5EB1E0" ZoomOutButtonMargin="0" ZoomOutButtonForeground="#FF249DE2" Width="161">

                                <am:LineChart.CategoryAxis>
                                    <am:CategoryAxis StrokeThickness="0"/>
                                </am:LineChart.CategoryAxis>
                                <am:LineChart.CategoryAxisGrid>
                                    <am:CategoryGrid Stroke="#08FFFFFF"/>
                                </am:LineChart.CategoryAxisGrid>
                                <am:LineChart.LeftValueAxisGrid>
                                    <am:ValueGrid Stroke="#08FFFFFF"/>
                                </am:LineChart.LeftValueAxisGrid>
                                <am:LineChart.LeftValueAxis>
                                    <am:ValueAxis StrokeThickness="0"/>
                                </am:LineChart.LeftValueAxis>
                                <am:LineChartGraph x:Name="VolatilityGraph3" AreaFillOpacity="1" AreaFill="#FFD46459" BalloonBackground="sc#1, 0.4452012, 0.08650046, 0.0202885624" BulletType="None" Brush="#00000000" Height="141" IsFilled="True" Width="95"/>
                                <am:LineChartGraph x:Name="VolatilityGraph4" AreaFillOpacity="1" AreaFill="#FF46C55D" BalloonBackground="sc#1, 0.4452012, 0.08650046, 0.0202885624" BulletType="None" Brush="#00D7D7EE" Height="72" IsFilled="True" Width="237"/>
                            </am:LineChart>

                            <Button x:Name="ZoomInGL" Content="+" Canvas.Left="183" Canvas.Top="21" Width="21" Click="ZoomInGL_Click" Visibility="Hidden"/>
                            <Button x:Name="ZoomInYK" Content="+" Canvas.Left="183" Canvas.Top="159" Width="21" Click="ZoomInYK_Click" Visibility="Hidden"/>
                        </Canvas>
                    </TabItem>

                </TabControl>
                <Border x:Name="chartBorder" BorderBrush="#FF0072C4" BorderThickness="1,3,1,1" HorizontalAlignment="Left" Height="301" VerticalAlignment="Top" Width="224" Canvas.Left="903" Canvas.Top="55"/>

            </Canvas>

        </Grid>
        <!--操作区-->
        <Grid x:Name="Grid3" HorizontalAlignment="Left" Height="245" Margin="29,0,0,21" VerticalAlignment="Bottom" Width="914" Background="#FF0D0D11" MouseEnter="Grid3_MouseEnter" MouseLeave="Grid3_MouseLeave">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>

            <TabControl x:Name="multipleTabControl" HorizontalAlignment="Left" Height="273" VerticalAlignment="Top" Width="914" BorderBrush="{x:Null}" Background="{x:Null}" Margin="0,-35,0,0">
                <TabItem x:Name="tradingTabItem" Foreground="White" Header="交易区" Margin="-2,9,2,-13" PreviewMouseLeftButtonDown="tradingTabItem_PreviewMouseLeftButtonDown" Style="{StaticResource TabItemStyle}">

                    <Grid x:Name="LeftChartGrid" Margin="-3,0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>

                        <ListView x:Name="tradingListView" Background="{x:Null}" BorderBrush="#FF0176C9" BorderThickness="0,3,0,0" Foreground="White" Height="211" HorizontalAlignment="Left"  IsSynchronizedWithCurrentItem="False" Margin="0,10,0,0" ScrollViewer.HorizontalScrollBarVisibility="Visible" ScrollViewer.VerticalScrollBarVisibility="Visible" SelectionChanged="tradingListView_SelectionChanged" Style="{StaticResource ListViewStyle}" VerticalAlignment="Top" Width="914">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn x:Name="ifChooseTGVCH" Header="" Width="50" >
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <CheckBox x:Name="ifChooseTCheckBox" HorizontalAlignment="Center" VerticalAlignment="Center" IsChecked="{Binding IfChooseOTGVCH, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Height="23"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn x:Name="userTGVCH" Header="投资账户" DisplayMemberBinding="{Binding UserID}" Width="100">
                                        <!--<GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <ComboBox x:Name="userTComboBox" Width="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" Style="{StaticResource CboCommomStyle}" Height="23" Foreground="White">

                                                </ComboBox>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>-->
                                    </GridViewColumn>
                                    <GridViewColumn x:Name="nameOTGVCH" Header="交易代码 "  DisplayMemberBinding="{Binding InstrumentID}" Width="110"/>
                                    <GridViewColumn x:Name="typeOTGVCH" Header="合约类型 " DisplayMemberBinding="{Binding CallOrPut}" Width="80"/>
                                    <GridViewColumn x:Name="exercisePriceTGVCH" Header="行权价 " Width="60" DisplayMemberBinding="{Binding ExercisePrice}"/>
                                    <GridViewColumn x:Name="typeOfTradeTGVCH" Header=" 交易类型" Width="70" >
                                        <GridViewColumn.CellTemplate >
                                            <DataTemplate>
                                                <ComboBox x:Name="typeOfTradingTComboBox" SelectedIndex="{Binding TradingType, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource CboCommomStyle}" Height="23" Foreground="White" SelectionChanged="typeOfTradingTComboBox_SelectionChanged">
                                                    <ComboBoxItem Content="买" HorizontalContentAlignment="Left" Width="70"/>
                                                    <ComboBoxItem Content="卖" HorizontalContentAlignment="Left" Width="70"/>

                                                </ComboBox>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn x:Name="lotTGVCH" Header=" 交易手数" Width="60">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <local:NumericUpAndDownUserControl x:Name="lotTNUAD" Width="Auto" HorizontalAlignment="Center" Value="{Binding Path=TradingNum,Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" Foreground="White" ValueChanged="lotTNUAD_ValueChanged"  />
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn x:Name="formOfClientageTGVCH" Header=" 委托方式" Width="80">
                                        <GridViewColumn.CellTemplate >
                                            <DataTemplate>
                                                <ComboBox x:Name="formOfClientageTComboBox" SelectedIndex="{Binding ClientageType,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource CboCommomStyle}" Height="23" Foreground="White" SelectionChanged="formOfClientageTComboBox_SelectionChanged">
                                                    <ComboBoxItem x:Name="marketPriceTCBI" Content=" 市价" HorizontalContentAlignment="Left" Width=" 80" />
                                                    <ComboBoxItem x:Name="limitPriceTCBI" Content=" 限价" HorizontalContentAlignment="Left" Width=" 80" />
                                                </ComboBox>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn x:Name="priceOfClientageTGVCH" Header=" 委托价格" Width=" 80">
                                        <GridViewColumn.CellTemplate >
                                            <DataTemplate >
                                                <TextBox x:Name="priceOfClientageTTextBox" Text="{Binding ClientagePrice,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding IsEnableOfClientagePrice,UpdateSourceTrigger=PropertyChanged}" Width="Auto" Style="{StaticResource textboxStyle}" Height="23" Foreground="White"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn x:Name="priceOfMarketTGVCH" Header=" 市场价格" DisplayMemberBinding="{Binding MarketPrice}" Width=" 80"/>
                                    <GridViewColumn x:Name="conditionTGVCH" Header=" 托单条件" Width=" 80">
                                        <GridViewColumn.CellTemplate >
                                            <DataTemplate>
                                                <ComboBox x:Name="conditionTComboBox" SelectedIndex="{Binding ClientageCondition,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource CboCommomStyle}" Height="23" Foreground="White">
                                                    <ComboBoxItem x:Name="comboBoxItem1" Content=" ROD" Visibility="{Binding AboutROD,UpdateSourceTrigger=PropertyChanged}"  HorizontalAlignment="Left" Width=" 80"/>
                                                    <ComboBoxItem Content=" FOK" Visibility="{Binding AboutFOK,UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Left" Width=" 80"/>
                                                    <ComboBoxItem Content=" IOC" Visibility="{Binding AboutIOC,UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Left" Width=" 80"/>
                                                </ComboBox>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn x:Name="setGradientTGVCH" Header=" 设置梯度" Width=" 60">
                                        <GridViewColumn.CellTemplate >
                                            <DataTemplate >
                                                <CheckBox x:Name="setGradientTCheckBox" IsChecked="{Binding IsSetGradient,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn x:Name="accuracyTGVCH" Header=" 精确度" Width=" 50">
                                        <GridViewColumn.CellTemplate >
                                            <DataTemplate >
                                                <TextBox x:Name="accuracyTTextBox" Text="{Binding Accuracy,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding IsSetGradient,Mode=OneWay}" Width=" 50" Style="{StaticResource textboxStyle}" TextChanged="accuracyTTextBox_TextChanged" Height="23" Foreground="White"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn x:Name="arithmeticProgressionTGVCH" Header="手数等差 " Width=" 50">
                                        <GridViewColumn.CellTemplate >
                                            <DataTemplate >
                                                <TextBox x:Name="arithmeticProgressionTTextBox" IsEnabled="{Binding IsSetGradient,Mode=OneWay}"  Text="{Binding ArithmeticProgression,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Width=" 50" Style="{StaticResource textboxStyle}" Height="23" Foreground="White" TextChanged="arithmeticProgressionTTextBox_TextChanged"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                </GridView>
                            </ListView.View>
                        </ListView>

                        <CheckBox x:Name="chooseAllCheckBox" Content="" HorizontalAlignment="Left" IsChecked="True" Margin="16,17,0,0" VerticalAlignment="Top" Click="chooseAllCheckBox_Click"/>
                        <Button x:Name="placeOrderTBtn" Content="下单" HorizontalAlignment="Right" Margin="0,0,25,4" VerticalAlignment="Bottom" Width="75" Style="{StaticResource darkButton}" Background="#FF2A3044" BorderBrush="{x:Null}" Foreground="White" Height="21" Click="placeOrderTBtn_Click"/>
                        <Button x:Name="deleteTBtn" Content="删除" HorizontalAlignment="Left" Margin="21,0,0,4" VerticalAlignment="Bottom" Width="75" Style="{StaticResource darkButton}" Background="#FF2A3044" BorderBrush="{x:Null}" Foreground="White" Height="21" Click="deleteTBtn_Click"/>
                        <Button x:Name="addSubjectMatter" Content="加入标的期货" HorizontalAlignment="Right" Margin="0,0,110,4" VerticalAlignment="Bottom" Width="110" Style="{StaticResource darkButton}" Background="#FF2A3044" BorderBrush="{x:Null}" Foreground="White" Height="21" Click="addSubjectMatter_Click"/>
                        <Button x:Name="analyseBtn1" Content="盈亏分析" Width="75" HorizontalAlignment="Right" Margin="0,0,231.6,3.6" VerticalAlignment="Bottom" Style="{StaticResource darkButton}" Background="#FF2A3044" BorderBrush="{x:Null}" Foreground="White" Height="21" Click="analyseBtn1_Click"/>

                    </Grid>
                </TabItem>

                <TabItem x:Name="holdDetailTabItem" Foreground="White" Header="持仓" Margin="-2,9,2,-13" Style="{StaticResource TabItemStyle}" PreviewMouseLeftButtonDown="holdDetailTabItem_PreviewMouseLeftButtonDown">
                    <Grid Margin="-3,0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>

                        <ListView x:Name="holdDetailListView" HorizontalAlignment="Left" Height="211" VerticalAlignment="Top" Width="914" BorderBrush="#FF0176C9" Background="{x:Null}" BorderThickness="0,3,0,0" Foreground="White" Margin="0,10,0,0" UseLayoutRounding="True"  Style="{StaticResource ListViewStyle}" ScrollViewer.HorizontalScrollBarVisibility="Visible" ScrollViewer.VerticalScrollBarVisibility="Visible" Grid.ColumnSpan="4">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn x:Name="ifChooseHDGVCH" Header="" Width="50">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <CheckBox x:Name="ifChooseHDCheckBox" IsChecked="{Binding IsChoose,UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn x:Name="userHDGVCH" Header="投资账户" DisplayMemberBinding="{Binding UserID,UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                                    <GridViewColumn x:Name="traderHDGVCH" Header="交易商" DisplayMemberBinding="{Binding ExchangeName,UpdateSourceTrigger=PropertyChanged}" Width="80"/>
                                    <GridViewColumn x:Name="typeHDGVCH" Header="交易代码" DisplayMemberBinding="{Binding InstrumentID,UpdateSourceTrigger=PropertyChanged}" Width="80"/>
                                    <GridViewColumn x:Name="latestPriceHDGVCH" Header="最新价" DisplayMemberBinding="{Binding LatestPrice,UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                                    <GridViewColumn x:Name="averagePriceHDGVCH" Header="开仓均价" DisplayMemberBinding="{Binding AveragePrice,UpdateSourceTrigger=PropertyChanged}" Width="90"/>
                                    <GridViewColumn x:Name="positionAveragePriceHDGVCH" Header="持仓均价" DisplayMemberBinding="{Binding PositionAveragePrice,UpdateSourceTrigger=PropertyChanged}" Width="90"/>
                                    <GridViewColumn x:Name="lotHDGVCH" Header=" 手数" DisplayMemberBinding="{Binding TradingNum,UpdateSourceTrigger=PropertyChanged}" Width="60"/>
                                    <GridViewColumn x:Name="typeOfTradeHDGVCH" Header=" 买/卖" DisplayMemberBinding="{Binding BuyOrSell,UpdateSourceTrigger=PropertyChanged}" Width="40"/>
                                    <GridViewColumn x:Name="dueDateHDGVCH" Header=" 到期日期" DisplayMemberBinding="{Binding DueDate,UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                                    <GridViewColumn x:Name="floatingProfitAndLossHDGVCH" Header=" 浮动盈亏" DisplayMemberBinding="{Binding FloatingProfitAndLoss,UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                                    <GridViewColumn x:Name="floatingProfitAndLossRateHDGVCH" Header="浮动盈亏比" DisplayMemberBinding="{Binding FloatingProfitAndLossRate,UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                                    <GridViewColumn x:Name="cashDepositHDGVCH" Header=" 保证金" DisplayMemberBinding="{Binding Margin,UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                                </GridView>
                            </ListView.View>
                        </ListView>

                        <CheckBox x:Name="chooseAllHDCheckBox" Content="" HorizontalAlignment="Left" IsChecked="False" Margin="1,17,0,214" Click="chooseAllHDCheckBox_Click" Grid.Column="3"/>
                        <Button x:Name="exerciseBtn" Content="行权" Width="75" HorizontalAlignment="Right" Margin="0,0,21,4" VerticalAlignment="Bottom" Style="{StaticResource darkButton}" Background="#FF2A3044" BorderBrush="{x:Null}" Foreground="White" Height="21" Grid.Column="3"/>
                        <Button x:Name="analyseBtn2" Content="盈亏分析" Width="75" HorizontalAlignment="Right" Margin="0,0,110,4" VerticalAlignment="Bottom" Style="{StaticResource darkButton}" Background="#FF2A3044" BorderBrush="{x:Null}" Foreground="White" Height="21" Grid.Column="3" Click="analyseBtn2_Click"/>
                        <Button x:Name="closeOutBtn" Background="#FF2A3044" BorderBrush="{x:Null}" Click="closeOutBtn_Click" Content="平仓" Foreground="White" Height="21" HorizontalAlignment="Right" Margin="0,0,199,4" Style="{StaticResource darkButton}" VerticalAlignment="Bottom" Width="75" Grid.Column="3"/>
                        <CheckBox x:Name="optionsHDCheckBox" Content="显示期权交易明细" IsChecked="True" HorizontalAlignment="Left" Margin="145,0,0,4" VerticalAlignment="Bottom" Foreground="#FF9395A2" HorizontalContentAlignment="Right" VerticalContentAlignment="Bottom" Click="optionsHDCheckBox_Click" Grid.Column="3"/>
                        <CheckBox x:Name="futuresHDCheckBox" Content="显示期货交易明细"  IsChecked="True" HorizontalAlignment="Left" Margin="3,0,0,4" VerticalAlignment="Bottom" Foreground="#FF9395A2" HorizontalContentAlignment="Right" VerticalContentAlignment="Bottom" Click="futuresHDCheckBox_Click" Grid.ColumnSpan="3" Grid.Column="1"/>

                    </Grid>
                </TabItem>

                <TabItem x:Name="historyTabItem" Foreground="White" Header="历史记录" Margin="-2,9,2,-13" PreviewMouseLeftButtonDown="historyTabItem_PreviewMouseLeftButtonDown" Style="{StaticResource TabItemStyle}">
                    <Grid Margin="-3,0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>

                        <ListView x:Name="historyListView" HorizontalAlignment="Left" Height="211" VerticalAlignment="Top" Width="914" Background="{x:Null}" BorderBrush="#FF0176C9" BorderThickness="0,3,0,0" Margin="0,10,0,0" Style="{StaticResource ListViewStyle}" ScrollViewer.HorizontalScrollBarVisibility="Visible" ScrollViewer.VerticalScrollBarVisibility="Visible" Foreground="White">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn x:Name="ifChoose" Header="" Width="50">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <CheckBox x:Name="ifChooseHCheckBox" IsChecked="{Binding HIfChoose,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn x:Name="nameHGVCH" Header="衍生品名称" DisplayMemberBinding="{Binding InstrumentID,UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                                    <GridViewColumn x:Name="timeHGVCH" Header="交易时间" DisplayMemberBinding="{Binding TradingTime, UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                                    <GridViewColumn x:Name="typeHGVCH" Header="交易类型" DisplayMemberBinding="{Binding TradingType, UpdateSourceTrigger=PropertyChanged}" Width="60"/>
                                    <!-- 买卖-->
                                    <GridViewColumn x:Name="lotOfPendingHGVCH" Header=" 挂单手数" DisplayMemberBinding="{Binding PostNum, UpdateSourceTrigger=PropertyChanged}" Width="60"/>
                                    <GridViewColumn x:Name="lotOfTransactionHGVCH" Header=" 成交手数" DisplayMemberBinding="{Binding DoneNum, UpdateSourceTrigger=PropertyChanged}" Width=" 60"/>
                                    <GridViewColumn x:Name="statusOfTransactionHGVCH" Header=" 成交状态" DisplayMemberBinding="{Binding TradingState, UpdateSourceTrigger=PropertyChanged}" Width="60"/>
                                    <GridViewColumn x:Name="priceOfPendingHGVCH" Header=" 挂单价格" DisplayMemberBinding="{Binding PostPrice, UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                                    <GridViewColumn x:Name="priceOfTransactionHGVCH" Header=" 成交价格" DisplayMemberBinding="{Binding DonePrice, UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                                    <GridViewColumn x:Name="timeLimitHGVCH" Header=" 有效期" DisplayMemberBinding="{Binding TimeLimit, UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                                    <GridViewColumn x:Name="userHGVCH" Header=" 投资账户" DisplayMemberBinding="{Binding UserID, UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                                    <GridViewColumn x:Name="IDOfTransactionHGVCH" Header="交易单号"   DisplayMemberBinding="{Binding ClientageType, UpdateSourceTrigger=PropertyChanged}" Width="120"/>
                                </GridView>
                            </ListView.View>
                        </ListView>

                        <Button x:Name="cancelOrderBtn" Content="撤单" HorizontalAlignment="Right" VerticalAlignment="Bottom" Width="80" Margin="0,0,21,4" Style="{StaticResource darkButton}" Background="#FF2A3044" BorderBrush="{x:Null}" Foreground="White" Height="21" Click="cancelOrderBtn_Click" />
                        <CheckBox x:Name="optionsCheckBox" Content="显示期权交易明细" HorizontalAlignment="Left" Margin="159,0,0,4" IsChecked="True" VerticalAlignment="Bottom" Foreground="White" HorizontalContentAlignment="Right" VerticalContentAlignment="Bottom" Click="optionsCheckBox_Click"/>
                        <CheckBox x:Name="futuresCheckBox" Content="显示期货交易明细" HorizontalAlignment="Left" Margin="10,0,0,4"  IsChecked="True"  VerticalAlignment="Bottom" Foreground="White" HorizontalContentAlignment="Right" VerticalContentAlignment="Bottom" Click="futuresCheckBox_Click"/>
                        <Button x:Name="pickUserBtn" Click="pickUserBtn_Click" Content="筛选账户" HorizontalAlignment="Right" VerticalAlignment="Bottom" Width="80" Margin="0,0,110,4" Style="{StaticResource darkButton}" Background="#FF2A3044" BorderBrush="{x:Null}" Foreground="White" Height="21" />
                        <CheckBox x:Name="chooseAllHCheckBox" Content="" HorizontalAlignment="Left" IsChecked="True" Margin="16,17,0,0" VerticalAlignment="Top" Click="chooseAllCheckBox_Click"/>

                    </Grid>
                </TabItem>

                <TabItem x:Name="userManageTabItem" Foreground="White" Header="账户管理" Margin="-2,9,2,-13" PreviewMouseLeftButtonDown="userManageTabItem_PreviewMouseLeftButtonDown" Style="{StaticResource TabItemStyle}">
                    <Grid Margin="-3,0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>

                        <ListView x:Name="userManageListView"  Background="{x:Null}" BorderBrush="#FF0176C9" BorderThickness="0,3,0,0" Foreground="White" Height="211" HorizontalAlignment="Left" Margin="0,10,0,0" ScrollViewer.HorizontalScrollBarVisibility="Visible" ScrollViewer.VerticalScrollBarVisibility="Visible"  Style="{StaticResource ListViewStyle}" VerticalAlignment="Top" Width="914" >
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn x:Name="userIDUMGVCH" Header=" 账户号" DisplayMemberBinding="{Binding UserID,UpdateSourceTrigger=PropertyChanged}" Width=" 100"/>

                                    <GridViewColumn x:Name="statusOfUserUMGVCH" Header=" 登录状态"  Width=" 70">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <ComboBox x:Name="setUserStatusComboBox"  SelectedIndex="{Binding UserState,UpdateSourceTrigger=PropertyChanged}" Width="Auto" SelectionChanged="setUserStatusComboBox_SelectionChanged">
                                                    <ComboBoxItem x:Name="logout" Content="登出" HorizontalContentAlignment="Left"/>
                                                    <ComboBoxItem x:Name="login" Content="登录" HorizontalContentAlignment="Left"/>
                                                </ComboBox>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn x:Name="userNameUMGVCH" Header=" 用户名称" DisplayMemberBinding="{Binding UserName,UpdateSourceTrigger=PropertyChanged}" Width=" 100"/>
                                    <GridViewColumn x:Name="openCompanyUMGVCH" Header="开户公司" DisplayMemberBinding="{Binding OpenCompany,UpdateSourceTrigger=PropertyChanged}" Width=" 100"/>
                                    <GridViewColumn x:Name="beginCapitalUMGVCH" Header=" 期初结存" DisplayMemberBinding="{Binding OpeningBalance,UpdateSourceTrigger=PropertyChanged}" Width=" Auto"/>
                                    <GridViewColumn x:Name="endCapitalUMGVCH" Header=" 期末结存" DisplayMemberBinding="{Binding FinalBalance,UpdateSourceTrigger=PropertyChanged}" Width=" Auto"/>
                                    <GridViewColumn x:Name="usedMarginUMGVCH" Header=" 保证金占用" DisplayMemberBinding="{Binding UsedMargin,UpdateSourceTrigger=PropertyChanged}" Width=" Auto"/>
                                    <GridViewColumn x:Name="availableCapitalUMGVCH" Header=" 可用资金" DisplayMemberBinding="{Binding AvailableCapital,UpdateSourceTrigger=PropertyChanged}" Width=" Auto"/>
                                    <GridViewColumn x:Name="additionalFundUMGVCH" Header=" 应追加资金" DisplayMemberBinding="{Binding AdditionalCapital,UpdateSourceTrigger=PropertyChanged}" Width=" Auto"/>
                                    <GridViewColumn x:Name="offsetGainAndLossUMGVCH" Header=" 平仓盈亏" DisplayMemberBinding="{Binding ClosedProfitAndLoss,UpdateSourceTrigger=PropertyChanged}" Width=" Auto"/>
                                    <GridViewColumn x:Name="floatingGainAndLossUMGVCH" Header=" 浮动盈亏" DisplayMemberBinding="{Binding FloatingProfitAndLoss,UpdateSourceTrigger=PropertyChanged}" Width=" Auto"/>
                                    <GridViewColumn x:Name="serviceChargeUMGVCH" Header=" 手续费" DisplayMemberBinding="{Binding ProcedureFees,UpdateSourceTrigger=PropertyChanged}" Width=" Auto"/>
                                    <GridViewColumn x:Name="incomeOfRoyaltyUMGVCH" Header=" 权利金收入" DisplayMemberBinding="{Binding RoyaltyIncome,UpdateSourceTrigger=PropertyChanged}" Width=" Auto"/>
                                    <GridViewColumn x:Name="payOfRoyaltyUMGVCH" Header=" 权利金支出" DisplayMemberBinding="{Binding RoyaltyOutcome,UpdateSourceTrigger=PropertyChanged}" Width=" Auto"/>
                                    <GridViewColumn x:Name="customerBenefitUMGVCH" Header=" 客户权益" DisplayMemberBinding="{Binding UserEquity,UpdateSourceTrigger=PropertyChanged}" Width=" Auto"/>
                                    <GridViewColumn x:Name="riskDegreeUMGVCH" Header=" 风险度" DisplayMemberBinding="{Binding RiskLevel,UpdateSourceTrigger=PropertyChanged}" Width=" Auto"/>
                                </GridView>
                            </ListView.View>
                        </ListView>

                        <Button x:Name="sighInBtn" Background="#FF2A3044" BorderBrush="{x:Null}" Click="sighInBtn_Click" Content="注册账户" Foreground="White" Height="21" HorizontalAlignment="Right" Margin="0,0,21,4" RenderTransformOrigin="0.488,0.619" Style="{StaticResource darkButton}" VerticalAlignment="Bottom" Width="80"/>

                    </Grid>
                </TabItem>

                <TabItem x:Name="strategyAndProfitTabItem"  Header="投资策略及收益" Style="{StaticResource TabItemStyle}" Foreground="White" Margin="-2,6,2,-10" Visibility="Hidden">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>

                        <ListView x:Name="profitListView" HorizontalAlignment="Left" Height="209" VerticalAlignment="Top" Width="915"  Background="{x:Null}" BorderBrush="#FF0176C9" BorderThickness="0,3,0,0" Margin="-3,7,-3,0" ScrollViewer.VerticalScrollBarVisibility="Visible" ScrollViewer.HorizontalScrollBarVisibility="Visible"  Style="{StaticResource ListViewStyle}" Foreground="#FF9198AC">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn x:Name="ifChoosePGVCH" Header="勾选" Width="50"/>
                                    <GridViewColumn x:Name="callTradingTypePGVCH" Header="看涨期权交易方向" Width="120"/>
                                    <GridViewColumn x:Name="exercisePricePGVCH" Header="行权价" Width="80"/>
                                    <GridViewColumn x:Name="putTradingTypePGVCH" Header="看跌期权交易方向" Width="120"/>
                                    <GridViewColumn x:Name="ifPossibleTGVCH" Header="有效性评价" Width="80"/>

                                </GridView>
                            </ListView.View>
                        </ListView>
                        <Button x:Name="placeOrderPBtn" Content="下单" HorizontalAlignment="Right" Margin="0,0,21,4" VerticalAlignment="Bottom" Width="75" Style="{StaticResource darkButton}" Background="#FF2A3044" BorderBrush="{x:Null}" Foreground="White" Height="21" Click="placeOrderTBtn_Click" Grid.Column="1"/>

                    </Grid>
                </TabItem>

            </TabControl>
        </Grid>
        <!--基本信息及动态提示区-->
        <Grid x:Name="basicInforAndPromptGrid" Background="#FF22242B" HorizontalAlignment="Right" Height="245" Margin="0,0,29,21" MouseEnter="basicInforAndPromptGrid_MouseEnter" MouseLeave="basicInforAndPromptGrid_MouseLeave" VerticalAlignment="Bottom" Visibility="Visible" Width="213">
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*"/>
                <ColumnDefinition Width="1*"/>
            </Grid.ColumnDefinitions>

            <TextBlock x:Name="userBIPTextBlock" Text="当前账户：" Grid.Column="0" Grid.Row="0" Margin="0,14,5,110" HorizontalAlignment="Right" Foreground="#FF8185A2" Grid.RowSpan="2"/>
            <TextBlock x:Name="showUserBIPTextBlock" Text="{Binding NowUserID,UpdateSourceTrigger=PropertyChanged}" Grid.Row="0" Foreground="White" FontSize="15" Margin="5,11,-1,110" Grid.Column="1" Grid.RowSpan="2"/>
            <TextBlock x:Name="totalCapitalBIPTextBlock" Text="总资本：" Grid.Column="0" Grid.Row="0" Margin="0,67,5,72" HorizontalAlignment="Right" Foreground="#FF8185A2" Grid.RowSpan="2"/>
            <TextBlock x:Name="showTotalCapitalBIPTextBlock" Text="{Binding TotalCapital,UpdateSourceTrigger=PropertyChanged}" Grid.Row="0" Margin="5,67,-1,72" Foreground="#FFBCBDCB" Grid.RowSpan="2" Grid.Column="1"/>
            <TextBlock x:Name="availableCapitalBIPTextBlock" Text="可用资金：" Grid.Column="0" Grid.Row="0" HorizontalAlignment="Right" Height="88" VerticalAlignment="Bottom" Foreground="#FF8185A2" Margin="0,0,5,72" Grid.RowSpan="2"/>
            <TextBlock x:Name="showAvailableCapitalBIPTextBlock" Text="{Binding AvailableCapital,UpdateSourceTrigger=PropertyChanged}" Grid.Row="0" Margin="5,82,-1,72" Foreground="#FFBCBDCB" Grid.RowSpan="2" Grid.Column="1"/>
            <TextBlock x:Name="occupyCapitalBIPTextBlock" Text="占用资金：" Grid.Column="0" Grid.Row="0" Margin="0,97,5,72" HorizontalAlignment="Right" Foreground="#FF8185A2" Grid.RowSpan="2"/>
            <TextBlock x:Name="showOccupyCapitalBIPTextBlock" Text="{Binding OccupyCapital,UpdateSourceTrigger=PropertyChanged}" Grid.Row="0" Margin="5,97,-1,72" Foreground="#FFBCBDCB" Grid.RowSpan="2" Grid.Column="1"/>
            <TextBlock x:Name="instruIDBIPTextBlock" Text="当前交易代码：" Grid.Column="0" Grid.Row="1" Margin="0,16,5,-13" HorizontalAlignment="Right" Foreground="#FF8185A2"/>
            <TextBlock x:Name="showInstruIDBIPTextBlock" Text="{Binding NowInstrumentID,UpdateSourceTrigger=PropertyChanged}" Grid.Row="1" Margin="5,16,-1,-13" Foreground="#FFBCBDCB" Grid.Column="1"/>
            <TextBlock x:Name="timeLimitBIPTextBlock" Text="到期天数：" Grid.Column="0" Grid.Row="1" Margin="0,31,5,-13" HorizontalAlignment="Right" Foreground="#FF8185A2"/>
            <TextBlock x:Name="showTimeLimitBIPTextBlock" Text="{Binding DayToEnd,UpdateSourceTrigger=PropertyChanged}" Grid.Row="1" Margin="5,31,-1,-13" Foreground="#FFBCBDCB" Grid.Column="1" />
            <TextBlock x:Name="dueDateBIPTextBlock" Text="到期日：" Grid.Column="0" Grid.Row="1" Margin="0,46,5,-13" HorizontalAlignment="Right" Foreground="#FF8185A2"/>
            <TextBlock x:Name="showDueDateBIPTextBlock" Text="{Binding DueDate,UpdateSourceTrigger=PropertyChanged}" Grid.Row="1" Margin="5,46,-1,-13" Foreground="#FFBCBDCB" Grid.Column="1" />
            <TextBlock x:Name="tickSizeBIPTextBlock" Text="最小变动价位：" Grid.Column="0" Grid.Row="1" Margin="0,61,5,-13" HorizontalAlignment="Right" Foreground="#FF8185A2"/>
            <TextBlock x:Name="showTickSizeBIPTextBlock" Text="{Binding TickSize,UpdateSourceTrigger=PropertyChanged}" Grid.Row="1" Margin="5,61,-1,-13" Foreground="#FFBCBDCB" Grid.Column="1"/>
            <TextBlock x:Name="maxLotBIPTextBlock" Text="最大可交易手数：" Grid.ColumnSpan="2" Grid.Row="1" Margin="5,76,-5,-13" Foreground="#FF8185A2"/>
            <TextBlock x:Name="showMaxLotBIPTextBlock" Text="{Binding MaxTradeNum,UpdateSourceTrigger=PropertyChanged}" Grid.Column="1" Grid.Row="1" Margin="5,76,-1,-13" Foreground="#FFBCBDCB"/>
        </Grid>
        <Button x:Name="darkRectangle" HorizontalAlignment="Left" Margin="29,38,0,0" VerticalAlignment="Top" Width="1127" Height="627" Style="{StaticResource darkRectangleStyle}"  Visibility="Hidden" Click="darkRectangle_Click"/>
        <!--添加账户区-->
        <Canvas x:Name="addUserCanvas" Background="#FF22242B" HorizontalAlignment="Right" Height="245" Margin="0,0,29,21" VerticalAlignment="Bottom" Visibility="Collapsed" Width="213">
            <Label Canvas.Left="10" Canvas.Top="10" Height="57" MaxWidth="193">
                <TextBlock Foreground="#FFB5B8BD" Text="       通过添加多个账户，可以在软件内各账户间随时切换交易，方便管理" TextWrapping="Wrap"/>
            </Label>
            <Label Canvas.Left="20" Canvas.Top="65" Height="57" MaxWidth="193">
                <TextBlock Name="addUserErrorWarn" Foreground="Red"   Visibility="Hidden" TextWrapping="Wrap"/>
            </Label>
            <TextBlock Foreground="#FFE6E8EC" Canvas.Left="27" Canvas.Top="96" Text="帐号：" TextWrapping="Wrap"/>
            <TextBox x:Name="userIDAUTB" Canvas.Left="68" Canvas.Top="92" Height="23"  TextWrapping="Wrap" VerticalContentAlignment="Center" Width="120"/>
            <TextBlock Foreground="#FFE6E8EC" Canvas.Left="27" Canvas.Top="133" Text="密码：" TextWrapping="Wrap"/>
            <PasswordBox x:Name="passwordAUTB" Canvas.Left="68" Canvas.Top="129" Height="23"   VerticalContentAlignment="Center" Width="120"/>
            <Button x:Name="resetAUBtn" Click="resetAUBtn_Click" Content="重置" Background="#FF4D5166" BorderBrush="{x:Null}" Canvas.Left="27" Canvas.Top="216" Style="{StaticResource darkButton}" Width="45"/>
            <Button x:Name="addUserBtn" Background="#FF4D5166" BorderBrush="{x:Null}" Canvas.Left="68" Canvas.Top="170" Content="添加账户" FlowDirection="RightToLeft" Foreground="White" Height="21" HorizontalAlignment="Right" HorizontalContentAlignment="Right" Padding="1" Style="{StaticResource darkButton}" VerticalAlignment="Bottom" Width="82" Click="addUserBtn_Click"/>

        </Canvas>

        <!--策略实验室伸缩面板-->
        <Canvas x:Name="Canvas1" HorizontalAlignment="Left" Height="627" Margin="0,38,0,0" VerticalAlignment="Top" Width="29" IsHitTestVisible="True" ClipToBounds="True" Background="#FF151519"  ScrollViewer.VerticalScrollBarVisibility="Disabled" FlowDirection="RightToLeft">

            <Button x:Name="startStrategyBtn" Content="开始分析" Canvas.Left="110" Canvas.Top="263" Width="82" Style="{StaticResource darkButton}" Height="20" Background="#FF4D5166" BorderBrush="{x:Null}" Foreground="White"/>

            <Button x:Name="StategyCanvasButtom" Content="    策略设计实验室   STRATEGY-DESIGN LAB" HorizontalAlignment="Left" VerticalAlignment="Top" Width="260" Canvas.Left="-116" Canvas.Top="146" RenderTransformOrigin="0.5,0.5" Style="{StaticResource leftAndRightButtom}" Foreground="White" Height="28" Click="StategyCanvasButtom_Click">
                <Button.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform/>
                        <SkewTransform/>
                        <RotateTransform Angle="90"/>
                        <TranslateTransform/>
                    </TransformGroup>

                </Button.RenderTransform>
            </Button>
            <Image x:Name="LeftImage" HorizontalAlignment="Left" Height="15" VerticalAlignment="Top" Width="20" Source="Resources/right.png" Canvas.Top="34" Canvas.Left="5" Stretch="Fill"/>
            <Button x:Name="strategyButton" Style="{StaticResource leftAndRightButtom}" Click="strategyButton_Click" Content="期权策略" Width="76" RenderTransformOrigin="0.5,0.5" Height="28" Canvas.Left="-23" Canvas.Top="354" Foreground="White">
                <Button.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform/>
                        <SkewTransform/>
                        <RotateTransform Angle="90"/>
                        <TranslateTransform/>
                    </TransformGroup>
                </Button.RenderTransform>
            </Button>
            <Button x:Name="arbitragyButton" Style="{StaticResource leftAndRightButtom}" Click="arbitragyButton_Click"  Content="期货套利" Width="76" RenderTransformOrigin="0.5,0.5" Height="28" Canvas.Left="-23" Canvas.Top="438" Foreground="White">
                <Button.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform/>
                        <SkewTransform/>
                        <RotateTransform Angle="90"/>
                        <TranslateTransform/>
                    </TransformGroup>
                </Button.RenderTransform>
            </Button>

            <Border x:Name="Canvas1Border1" BorderBrush="#FF0076C8" BorderThickness="4,1,0,1" Height="627" Width="292" HorizontalAlignment="Right" VerticalAlignment="Bottom" Visibility="Hidden"/>


        </Canvas>

        <!--风险实验室伸缩面板-->
        <Canvas x:Name="Canvas2" HorizontalAlignment="Right" Height="627" Margin="0,38,0,0" VerticalAlignment="Top" Width="29" IsHitTestVisible="True" ClipToBounds="True" Background="#FF14161E" >

            <Button x:Name="RiskCanvasButtom" Content="   RISK-MANAGEMENT LAB   风险管理实验室" HorizontalAlignment="Left" VerticalAlignment="Top" Width="270" Canvas.Left="-121" Canvas.Top="151" RenderTransformOrigin="0.5,0.5" Style="{StaticResource leftAndRightButtom}" Foreground="White" Height="29" Click="RiskCanvasButtom_Click" HorizontalContentAlignment="Left" VerticalContentAlignment="Top">
                <Button.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform/>
                        <SkewTransform/>
                        <RotateTransform Angle="90"/>
                        <TranslateTransform/>
                    </TransformGroup>
                </Button.RenderTransform>
            </Button>
            <Image x:Name="RightImage" HorizontalAlignment="Left" Height="15" VerticalAlignment="Top" Width="20" Source="Resources/left.png" Canvas.Top="33" Canvas.Left="4" Stretch="Fill"/>
            <Border x:Name="Canvas2Border1" BorderBrush="#FF0076C8" BorderThickness="4,1,0,1" Height="627" Width="60" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="Hidden"/>

        </Canvas>


        <StatusBar x:Name="statusBar1" HorizontalAlignment="Left" Height="20" VerticalAlignment="Bottom" Width="1185" Background="#FF007ACC" Margin="0,0,0,1"/>
        <Border x:Name="Border1" BorderBrush="#FF007ACC" BorderThickness="1" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Left" VerticalAlignment="Top" Panel.ZIndex="10"/>




    </Grid>
</Window>
